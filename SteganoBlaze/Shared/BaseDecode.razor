@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@using System.IO.Compression;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar
@inject IJSRuntime js
@inherits BasePage

@code {
	protected Base64File? message;

	protected string fileName = "";
	protected string contentType = "";
	protected int fileSize;
	protected bool compressed;

	protected void ParseMetadata(byte[] metadataBytes)
	{
		string metadata = UnicodeEncoding.UTF8.GetString(metadataBytes);

		fileName = metadata.Substring(metadata.IndexOf("!fnS!") + 5, metadata.IndexOf("!fnE!") - metadata.IndexOf("!fnS!") - 5);
		contentType = metadata.Substring(metadata.IndexOf("!ctS!") + 5, metadata.IndexOf("!ctE!") - metadata.IndexOf("!ctS!") - 5);
		fileSize = Int32.Parse(metadata.Substring(metadata.IndexOf("!fsS!") + 5, metadata.IndexOf("!fsE!") - metadata.IndexOf("!fsS!") - 5));
		compressed = bool.Parse(metadata.Substring(metadata.IndexOf("!cpS!") + 5, metadata.IndexOf("!cpE!") - metadata.IndexOf("!cpS!") - 5));
	}

	protected async Task<byte[]> DecryptMessage(IDecoder decoder, int metadataSize)
	{
		byte[] passwordBytes = UTF8Encoding.UTF8.GetBytes(password);
		byte[] salt = decoder.Decode(16);
		byte[] iv = decoder.Decode(16);

		var metadataBytes = decoder.Decode(metadataSize);

		List<byte[]> aesInputs = new List<byte[]> { metadataBytes, passwordBytes, salt, iv };
		metadataBytes = await ReadJSStream("decryptData", aesInputs);

		ParseMetadata(metadataBytes);

		var file = decoder.Decode(fileSize);

		await UpdateProgress(Loc["DecryptingMessage"], 60);

		aesInputs = new List<byte[]> { file, passwordBytes, salt, iv };
		return await ReadJSStream("decryptData", aesInputs);
	}
	protected async Task<byte[]> Decompress(byte[] data)
	{
		using MemoryStream input = new MemoryStream(data);
		using MemoryStream output = new MemoryStream();
		using (DeflateStream dstream = new DeflateStream(input, CompressionMode.Decompress))
			await dstream.CopyToAsync(output);

		return output.ToArray();
	}

	protected async Task SaveMessage()
	{
		try
		{
			await js.InvokeVoidAsync("saveFile", message);
		}
		catch
		{
			Snackbar.Add(Loc["ErrorSavingMessage"], Severity.Error);
		}
	}
}
