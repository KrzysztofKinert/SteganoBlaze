@inject IStringLocalizer<Resource> Loc

<MudDivider />
<MudText Typo="Typo.body1" Class="pt-4" Align="Align.Center">@Loc["EncryptionPassword"]</MudText>
<MudGrid Class="align-content-center justify-space-evenly pb-4" Spacing="2">
	<MudItem sm="4" xs="12">
		<MudTextField Value="password" ValueChanged="@((string p) => PasswordEntered(p))" Immediate="true" T="string" Label="@Loc["EnterPassword"]" HelperText="@passwordError" Error="@(passwordError is not null)" InputType="InputType.Password" HelperTextOnFocus="false" />
	</MudItem>
	<MudItem sm="4" xs="12">
		<MudTextField Value="passwordRepeat" ValueChanged="@((string r) => PasswordRepeatEntered(r))" Immediate="true" T="string" Label="@Loc["RepeatPassword"]" HelperText="@passwordRepeatError" Error="@(passwordRepeatError is not null)" InputType="InputType.Password" HelperTextOnFocus="false" />
	</MudItem>
</MudGrid>

@code {
	[Parameter] public EventCallback<string> OnPasswordChanged { get; set; }

	string password = "";
	string passwordRepeat = "";

	string? passwordError = null;
	string? passwordRepeatError = null;

	async Task PasswordEntered(string value)
	{
		password = value;
		await Validate();
	}
	async Task PasswordRepeatEntered(string value)
	{
		passwordRepeat = value;
		await Validate();
	}

	async Task Validate()
	{
		if (password != passwordRepeat)
		{
			passwordError = Loc["PasswordsMustMatch"];
			passwordRepeatError = Loc["PasswordsMustMatch"];
			await OnPasswordChanged.InvokeAsync(null);
		}
		else
		{
			if (password == "")
			{
				passwordError = Loc["EnterPassword"];
				passwordRepeatError = Loc["RepeatPassword"];
				await OnPasswordChanged.InvokeAsync(null);
			}
			else
			{
				passwordError = null;
				passwordRepeatError = null;
				await OnPasswordChanged.InvokeAsync(password);
			}
		}
	}
}
