@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@inject IJSRuntime js
@inject AppState AppState
@implements IDisposable

<a hidden id="saveLink" download="" href="" target="_blank"/>
<MudButton HtmlTag="label"
		   Variant="Variant.Filled"
		   Color=@Color.Primary
		   StartIcon="@Icons.Filled.Download"
		   OnClick="SaveFile"
		   Disabled=@(fileToSave is null)
		   Style="width:100%">
	<MudText Typo="Typo.button" Class="align-center">@Localize["Save"]</MudText>
</MudButton>

@code {
	[Parameter] public File? fileToSave { get; set; }

	protected override void OnInitialized() { AppState.OnChange += StateHasChanged; }
	public void Dispose() { AppState.OnChange -= StateHasChanged; }

	protected async Task SaveFile()
	{
		try
		{
			await js.InvokeVoidAsync("saveFile", fileToSave);
		}
		catch
		{
			Snackbar.Add(Localize["ErrorSavingMessage"], Severity.Error);
		}
	}
}
