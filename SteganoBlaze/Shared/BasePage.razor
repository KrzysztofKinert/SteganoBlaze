@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@using System.IO.Compression;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar
@inject IJSRuntime js

@code {
	protected Base64File? carrier;
	protected Stopwatch watch = new Stopwatch();

	public string password { get; set; } = "";

	protected int processingValue = 0;
	protected bool processing = false;
	protected string? processingTask = "";


	protected virtual Task ReadCarrier(byte[] carrierBytes, IBrowserFile fileInfo) { return Task.CompletedTask; }
	protected virtual Task ResetCarrier() { return Task.CompletedTask; }

	protected async Task OpenCarrier(InputFileChangeEventArgs e)
	{
		await ResetCarrier();

		if (e.File.Size > AppState.maxAllowedCarrierSize)
		{
			Snackbar.Add(Loc["MaxCarrierSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedCarrierSize).ToString(), Severity.Error);
			return;
		}

		var carrierBytes = new byte[e.File.Size];

		try
		{
			using (var stream = e.File.OpenReadStream(AppState.maxAllowedCarrierSize))
				await stream.ReadAsync(carrierBytes);
		}
		catch
		{
			Snackbar.Add(Loc["MaxCarrierSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedCarrierSize).ToString(), Severity.Error);
			return;
		}

		await ReadCarrier(carrierBytes, e.File);
	}

	protected async Task<byte[]> ReadJSStream(string jsFunction, List<byte[]>? aesInputs = null)
	{
		try
		{
			IJSStreamReference? dataStreamReference;
			if (aesInputs is null)
				dataStreamReference = await js.InvokeAsync<IJSStreamReference>(jsFunction);
			else
				dataStreamReference = await js.InvokeAsync<IJSStreamReference>(jsFunction, aesInputs[0], aesInputs[1], aesInputs[2], aesInputs[3]);

			var dataBytes = new byte[dataStreamReference.Length];
			using (var stream = await dataStreamReference.OpenReadStreamAsync(AppState.maxAllowedCarrierSize * 10))
				await stream.ReadAsync(dataBytes);

			return dataBytes;
		}
		catch
		{
			throw new Exception();
		}
	}
	protected async Task UpdateProgress(string progressText, int progressValue)
	{
		processingTask = progressText;
		processingValue = progressValue;
		StateHasChanged();
		await Task.Delay(10);
	}
}
