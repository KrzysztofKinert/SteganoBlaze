@page "/ImageDecode"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using System.IO.Compression;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar
@inject IJSRuntime js
@inherits BaseDecode

<PageTitle>@Loc["ImageDecoding"]</PageTitle>

<canvas hidden id="canvas"/>
<a hidden id="saveLink" download="" href="" target="_blank"/>
@if(carrier is not null)
{
	<img hidden id="carrierImage" @onload="GetCarrierDimensions" @onerror="CarrierCorrupted" src="data:@carrier.contentType;base64,@carrier.base64Data"/>
}

<MudGrid Spacing="1">          
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
                    <InputFile class="custom-file-input" OnChange="OpenCarrier" hidden accept="image/png, image/webp" id="inputImage"/>
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                StartIcon="@Icons.Filled.Image"
                                FullWidth="true"
								Disabled=@processing
								Class="mt-2"
                                for="inputImage">
                        <MudText Typo="Typo.button" Class="align-center">@Loc["ChooseCarrier"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(carrier?.fileName ?? "")</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0" >
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:70%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(carrier?.SizeToString() ?? "")</MudText>
						</MudListItem>
							<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2" />
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Dimensions"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@carrierDimensions</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
					<MudButton HtmlTag="label"
                                Variant="Variant.Outlined"
                                Color="Color.Primary"
                                StartIcon="@Icons.Filled.AttachFile"
                                FullWidth="true"
								DisableRipple="true"
								Class="mt-2 cursor-default">
                            <MudText Typo="Typo.button" Align="Align.Center">@Loc["DecodedFile"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(message?.fileName ?? "")</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:70%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(message?.SizeToString() ?? "")</MudText>
						</MudListItem>
                            <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2" />
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Type"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@(message?.contentType ?? "")</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
		</MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex mud-width-full">
			<MudGrid Class="align-center justify-space-evenly" Spacing="0">
				<MudItem sm="4" xs="12" Class="pa-1">
					<MudText Typo="Typo.body1" Style="font-size: min(3vw, 16px);" Align="Align.Center">@Loc["EnterPasswordIfEncrypted"]</MudText>
					<MudText Typo="Typo.body1" Style="font-size: min(3vw, 16px);" Align="Align.Center">@Loc["LeaveEmptyIfNot"]</MudText>
				</MudItem>
				<MudItem sm="4" xs="12" Class="pa-1">
					<MudTextField @bind-Value="password" T="string" Class="pt-0 mt-0 mb-2 mx-3" Label="@Loc["EnterPassword"]" InputType="InputType.Password"/>
				</MudItem>
			</MudGrid>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width:100%" Class="d-flex flex-column pa-0">
				<MudListItem Class="pb-2 pt-3">
					<MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Style="transform: scaleY(2)" Value="@processingValue">
						<MudText Typo="Typo.subtitle2" Color="Color.Tertiary" Style="transform: scaleY(0.5);" Class="align-center">@processingTask</MudText>
					</MudProgressLinear>
				</MudListItem>
				<MudListItem Class="pt-0">
					<MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width:100%" Class="d-flex justify-space-around flex-row">
						<MudButton HtmlTag="label"
									Variant="Variant.Filled"
									Color="Color.Primary"
									StartIcon="@Icons.Filled.FilePresent"
									OnClick="Decode"
									Disabled=@(carrier is null)
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Decode"]</MudText>
						</MudButton>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
						<MudButton HtmlTag="label"
									Variant="Variant.Filled" 
									Color="Color.Primary"
									StartIcon="@Icons.Filled.Download"
									OnClick="SaveMessage"
									Disabled=@(message is null)
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Save"]</MudText>
						</MudButton>
					</MudList>
				</MudListItem>
			</MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" hidden="@(carrier is null)">
		<MudPaper Elevation="3">
			<MudList Clickable="false" Dense="true">
				<MudListItem Class="py-0 my-0">
					<MudContainer Style="width:100%" Class="d-flex justify-center flex-row">
						<MudButton Variant="Variant.Outlined"
									Color="Color.Primary"
									Size="Size.Small"
									DisableRipple = "true"
									Class="mt-2 cursor-default">
							<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["EncodedImage"]</MudText>
						</MudButton>
					</MudContainer>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudContainer Class="d-flex justify-center">
						@if(carrier is not null)
						{
							<img id="carrierImagePreview" class="center" style="max-width:100%; height:auto;" src="data:@carrier.contentType;base64,@carrier.base64Data" Fluid="true" Alt=@Loc["OriginalImage"]/>
						}
					</MudContainer>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>
</MudGrid>

@code {
	int imageWidth;
	int imageHeight;

	string? carrierDimensions = ""; 

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Primary, "ImageDecoding");
	}

	protected override async Task ReadCarrier(byte[] carrierBytes, IBrowserFile fileInfo)
	{
		carrier = new Base64File(carrierBytes, fileInfo);
		carrierDimensions = Loc["Loading"];
	}

	public async Task ChangeState()
	{
		StateHasChanged();
		await Task.Delay(1);
	}
	protected override async Task ResetCarrier()
	{
		processingValue = 0;
		processing = false;
		processingTask = "";

		fileName = "";
		contentType = "";
		fileSize = 0;
		compressed = false;

		carrier = null;
		message = null;

		imageWidth = 0;
		imageHeight = 0;
		carrierDimensions = ""; 

		StateHasChanged();
		await Task.Delay(10);
	}

	async Task GetCarrierDimensions()
	{
		try
		{
			imageWidth = await js.InvokeAsync<int>("getImageWidth");
			imageHeight = await js.InvokeAsync<int>("getImageHeight");

			if ((imageHeight * imageWidth) > AppState.maxAllowedCarrierPixels)
				throw new Exception();

			carrierDimensions = imageWidth.ToString() + " x " + imageHeight.ToString();
		}
		catch
		{
		    Snackbar.Add(Loc["MaxCarrierPixels"] + " 5 MP", Severity.Error);
			await ResetCarrier();
		}
	}
	async Task CarrierCorrupted()
	{
		Snackbar.Add(Loc["CarrierImageCorrupted"], Severity.Error);
		await ResetCarrier();
	}
	async Task Decode()
	{
		watch.Reset();
		watch.Start();
		processing = true;
		await UpdateProgress(Loc["ReadingImageData"], 0);

		Image carrier = new Image { pixelData = await ReadJSStream("getImageData"), height = imageHeight, width = imageHeight};

		try
		{
			ImageDecoder decoder = new ImageDecoder(carrier);

			await UpdateProgress(Loc["DecodingMessage"], 20);

			string header = UnicodeEncoding.UTF8.GetString(decoder.Decode(15));
			var metadataSize = Int32.Parse(header.TakeLast(4).ToArray());

			byte[] file;

			if (password != "")
				file = await DecryptMessage(decoder, metadataSize);
			else
			{
				var metadataBytes = decoder.Decode(metadataSize);
				ParseMetadata(metadataBytes);
				file = decoder.Decode(fileSize);
			}

			if (compressed is true)
			{
				await UpdateProgress(Loc["DecompressingMessage"], 70);
				file = await Decompress(file);
			}

			await UpdateProgress(Loc["SavingMessageData"], 80);

			message = new Base64File { base64Data = Convert.ToBase64String(file), contentType = contentType, fileName = fileName, fileSize = file.Length };
			
			processing = false;
			watch.Stop();
			await UpdateProgress(Loc["DecodingDoneIn"] + " " + watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);
		}
		catch
		{
			processing = false;
			await UpdateProgress(Loc["ImageNotEncoded"], 0);
			return;
		}
	}
}