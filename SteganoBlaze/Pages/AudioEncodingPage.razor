@page "/AudioEncodingPage"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using System.IO.Compression;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@using SteganoBlaze.Shared.Components;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar

<PageTitle>@Loc["AudioEncoding"]</PageTitle>

<a hidden id="saveLink" download="" href="" target="_blank"/>
<MudGrid Spacing="1">
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
			<OpenAudio Disabled=@processing OnAudioChanged=@((WAV c) => CarrierChanged(c))/>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
			<OpenMessage Disabled=@processing OnMessageChanged=@((Message m) => MessageChanged(m))/>
		</MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%">
			<SampleBitsPicker BitsPerSample=@carrier?.bitsPerSample OnSampleBitsToEncodeChanged=@((int s) => SampleBitsToEncodeChanged(s))/>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex flex-column">
			<EncodingInformation 
				Capacity=@((carrier?.GetSampleCount() ?? 0) * options.bitsToEncode / 8.0)
				MessageSize=@(message?.messageSize ?? 0)
				OnMessageFitsChanged=@((bool e) => MessageFitsChanged(e))>
			</EncodingInformation>
        </MudPaper>
	</MudItem>

		<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex align-center justify-center mud-width-full">
			<EncodingOptions 
					Disabled=@processing
					OnOptionsChanged=@((Options o) => OptionsChanged(o))>
			</EncodingOptions>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<AudioEncode
				CanEncode=@(messageFits && validPassword)
				Carrier=@carrier
				Message=@message
				Options=@options
				OnProcessingChanged=@((bool p) => ProcessingChanged(p))
				OnEncodedCarrierChanged=@((File c) => EncodedCarrierChanged(c))>
			</AudioEncode>
        </MudPaper>
	</MudItem>

	<div>@time</div>

	<MudItem xs="12" hidden="@(carrier is null)">
		<MudPaper Elevation="3" Style="height:100%" Class="px-0 mx-0">
			<AudioPreview Label=@Loc["OriginalAudio"] Carrier=@carrier/>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" hidden=" @(encodedCarrier is null)">
		<MudPaper Elevation="3" Style="height:100%" Class="px-0 mx-0">
			<AudioPreview Label=@Loc["EncodedAudio"] Carrier=@encodedCarrier/>
        </MudPaper>
	</MudItem>

</MudGrid>

@code 
{
	WAV? carrier;
	Message? message;
	File? encodedCarrier;

	byte[]? messageDecompressed;

	bool messageFits = false;
	bool validPassword = true;
	bool processing = false;

	AudioOptions options = new AudioOptions();

	Stopwatch watch = new Stopwatch();
	double time = 0;

	protected override void OnAfterRender(bool firstRender)
	{
		watch.Stop();
		time = watch.Elapsed.TotalSeconds;
		watch.Restart();
	}
	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Tertiary, "AudioEncoding");
		watch.Start();
	}

	void CarrierChanged(WAV value)
	{
		encodedCarrier = null;
		carrier = value;
	}
	void MessageFitsChanged(bool value) { messageFits = value; }
	void ProcessingChanged(bool value) { processing = value; }
	void EncodedCarrierChanged(File value) { encodedCarrier = value; }

	async Task MessageChanged(Message newMessage)
	{
		messageDecompressed = null;
		message = newMessage;
		if(options.compressionEnabled is true)
			await ChangeCompression(true);
	}
	async Task OptionsChanged(Options value)
	{
		if (options.compressionEnabled != value.compressionEnabled)
			await ChangeCompression(value.compressionEnabled);

		options.compressionEnabled = value.compressionEnabled;
		options.encryptionEnabled = value.encryptionEnabled;
		options.scatteredEncodingEnabled = value.scatteredEncodingEnabled;
		options.password = value.password;

		if (options.encryptionEnabled is false || (options.encryptionEnabled is true && options.password is not null))
			validPassword = true;
		else
			validPassword = false;
	}

	async Task ChangeCompression(bool compressionEnabled)
	{
		if (message is null) return;

		if (compressionEnabled is true)
		{
			try
			{
				messageDecompressed = message.fileData;
				message.fileData = await Compress(message.fileData);
				message.compressed = true;
			}
			catch
			{
				Snackbar.Add(Loc["ErrorCompressingMessage"], Severity.Error);
			}
		}
		else
		{
			message.fileData = messageDecompressed!;
			messageDecompressed = null;
			message.compressed = false;
		}
		message.UpdateMetaData();
	}
	async Task<byte[]> Compress(byte[] data)
	{
		using MemoryStream output = new MemoryStream();
		using (DeflateStream dstream = new DeflateStream(output, CompressionLevel.SmallestSize))
			await dstream.WriteAsync(data, 0, data.Length);
		return output.ToArray();
	}
	void SampleBitsToEncodeChanged(int value)
	{
		options.bitsToEncode = value;
	}
}