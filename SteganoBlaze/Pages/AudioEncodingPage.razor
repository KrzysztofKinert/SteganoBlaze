@page "/AudioEncodingPage"
@inject AppState AppState
@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@using SteganoBlaze.Components.Audio
@implements IDisposable

<PageTitle>@Localize["AudioEncoding"]</PageTitle>

<a hidden id="saveLink" download="" href="" target="_blank"></a>
<MudGrid Spacing="1">
    <MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height: 100%">
            <OpenAudio Disabled="@_processing" OnAudioChanged="@(CarrierChanged)"/>
        </MudPaper>
    </MudItem>

    <MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Style="height: 100%">
            <OpenMessage Disabled="@_processing" OnMessageChanged="@(MessageChanged)"/>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height: 100%">
            <SampleBitsPicker BitsPerSample="@_carrier?.BitsPerSample" OnSampleBitsToEncodeChanged="@(SampleBitsToEncodeChanged)"/>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height: 100%" Class="d-flex flex-column">
            <EncodingInformation
                Capacity="@((_carrier?.GetTotalSampleCount() ?? 0) * _options.BitsToEncode / 8.0)"
                MessageSize="@(_message?.GetMessageSize() ?? 0)"
                OnMessageFitsChanged="@(MessageFitsChanged)">
            </EncodingInformation>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="3" Style="height: 100%" Class="d-flex align-center justify-center mud-width-full">
            <EncodingOptions
                Disabled="@_processing"
                OnOptionsChanged="@(OptionsChanged)">
            </EncodingOptions>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
            <AudioEncode
                CanEncode="@(_messageFits && _validPassword)"
                Carrier="@_carrier"
                Message="@_message"
                Options="@_options"
                OnProcessingChanged="@(ProcessingChanged)"
                OnEncodedCarrierChanged="@(EncodedCarrierChanged)">
            </AudioEncode>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" hidden="@(_carrier is null)">
        <MudPaper Elevation="3" Style="height: 100%" Class="px-0 mx-0">
            <AudioPreview Label=@Localize["OriginalAudio"] Carrier="@_carrier"/>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" hidden=" @(_encodedCarrier is null)">
        <MudPaper Elevation="3" Style="height: 100%" Class="px-0 mx-0">
            <AudioPreview Label=@Localize["EncodedAudio"] Carrier="@_encodedCarrier"/>
        </MudPaper>
    </MudItem>

</MudGrid>

@code
{
    Wav? _carrier;
    Message? _message;
    File? _encodedCarrier;

    byte[]? _messageDecompressed;

    bool _messageFits;
    bool _validPassword = true;
    bool _processing;

    readonly AudioSteganographyOptions _options = new();

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.SetPageTheme(Color.Tertiary, "AudioEncoding");
    }

    async Task CarrierChanged(Wav value)
    {
        _carrier = null;
        StateHasChanged();
        await Task.Delay(100);
        _encodedCarrier = null;
        _carrier = value;
    }

    void MessageFitsChanged(bool value)
    {
        _messageFits = value;
    }

    void ProcessingChanged(bool value)
    {
        _processing = value;
        if (_processing is true)
            _encodedCarrier = null;
    }

    void EncodedCarrierChanged(File value)
    {
        _encodedCarrier = value;
    }

    async Task MessageChanged(Message newMessage)
    {
        _messageDecompressed = null;
        _message = newMessage;
        if (_options.CompressionEnabled is true)
            await ChangeCompression(true);
    }

    async Task OptionsChanged(SteganographyOptions value)
    {
        if (_options.CompressionEnabled != value.CompressionEnabled)
            await ChangeCompression(value.CompressionEnabled);

        _options.CompressionEnabled = value.CompressionEnabled;
        _options.EncryptionEnabled = value.EncryptionEnabled;
        _options.ScatteredEncodingEnabled = value.ScatteredEncodingEnabled;
        _options.Password = value.Password;

        if (_options.EncryptionEnabled is false || (_options.EncryptionEnabled is true && _options.Password is not null))
            _validPassword = true;
        else
            _validPassword = false;
    }

    async Task ChangeCompression(bool compressionEnabled)
    {
        if (_message is null) return;

        if (compressionEnabled is true)
        {
            try
            {
                _messageDecompressed = _message.ByteData;
                _message.ByteData = await Compression.Compress(_message.ByteData);
                _message.IsCompressed = true;
            }
            catch
            {
                Snackbar.Add(Localize["ErrorCompressingMessage"], Severity.Error);
            }
        }
        else
        {
            _message.ByteData = _messageDecompressed!;
            _messageDecompressed = null;
            _message.IsCompressed = false;
        }
        _message.UpdateHeader();
    }

    void SampleBitsToEncodeChanged(int value)
    {
        _options.BitsToEncode = value;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}