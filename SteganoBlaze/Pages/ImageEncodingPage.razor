@page "/ImageEncodingPage"
@using SteganoBlaze.Components.Image
@using SteganoBlaze.Models
@inject AppState AppState
@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@implements IDisposable

<PageTitle>@Localize["ImageEncoding"]</PageTitle>

<MudGrid Spacing="1">
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
			<OpenImage Disabled=@processing EncodedImage="false" OnImageChanged=@((Image i) => CarrierChanged(i))/>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
			<OpenMessage Disabled=@processing OnMessageChanged=@((Message m) => MessageChanged(m))/>
		</MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%">
			<PixelBitsPicker OnPixelBitsChanged=@((PixelBits b) => PixelBitsChanged(b))/>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex flex-column">
			<EncodingInformation 
				Capacity=@((carrier?.width ?? 0) * (carrier?.height ?? 0) * options.BitsToEncode.GetBitSum() / 8.0)
				MessageSize=@(message?.GetMessageSize() ?? 0)
				OnMessageFitsChanged=@((bool e) => MessageFitsChanged(e))>
			</EncodingInformation>
			<PixelValueInformation
				PixelBits=@options.BitsToEncode>
			</PixelValueInformation>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex align-center justify-center mud-width-full">
			@if(AppState.webPUnavailable)
			{
				<EncodingOptions 
						Disabled=@processing
						OnOptionsChanged=@((SteganographyOptions o) => OptionsChanged(o))>
				</EncodingOptions>
			}
			else
			{
				<EncodingOptions 
						Disabled=@processing
						OnWebPEnabledChagned=@((bool w) => WebPEnabledChanged(w))
						OnOptionsChanged=@((SteganographyOptions o) => OptionsChanged(o))>
				</EncodingOptions>
			}
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<ImageEncode 
				CanEncode=@(messageFits && validPassword)
				Carrier=@carrier 
				Message=@message 
				Options=@options
				OnProcessingChanged=@((bool p) => ProcessingChanged(p))
				OnEncodedCarrierChanged=@((File c) => EncodedCarrierChanged(c))>
			</ImageEncode>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" hidden=@(carrier is null)>
		<MudPaper Elevation="3">
			<EncodingImagePreview Carrier=@carrier EncodedCarrier=@encodedCarrier/>
        </MudPaper>
	</MudItem>
</MudGrid>

@code {
	Image? carrier;
	Message? message;
	File? encodedCarrier;

	byte[]? messageDecompressed;

	bool messageFits = false;
	bool validPassword = true;
	bool processing = false;

	ImageSteganographyOptions options = new ImageSteganographyOptions();

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Primary, "ImageEncoding");
	}

	void PixelBitsChanged(PixelBits bits) { options.BitsToEncode = bits; }
	void MessageFitsChanged(bool value) { messageFits = value; }
	void ProcessingChanged(bool value) => processing = value;
	void EncodedCarrierChanged(File value) { encodedCarrier = value; }
	void WebPEnabledChanged(bool value) { options.WebPFormatEnabled = value; }
	void CarrierChanged(Image newCarrier)
	{
		encodedCarrier = null;
		carrier = newCarrier;
	}
	async Task MessageChanged(Message newMessage)
	{
		messageDecompressed = null;
		message = newMessage;
		if(options.CompressionEnabled is true)
			await ChangeCompression(true);
	}
	async Task OptionsChanged(SteganographyOptions value)
	{
		if (options.CompressionEnabled != value.CompressionEnabled)
			await ChangeCompression(value.CompressionEnabled);

		options.CompressionEnabled = value.CompressionEnabled;
		options.EncryptionEnabled = value.EncryptionEnabled;
		options.ScatteredEncodingEnabled = value.ScatteredEncodingEnabled;
		options.Password = value.Password;

		validPassword = (options.EncryptionEnabled is false || (options.EncryptionEnabled is true && options.Password is not null)) ? true : false;
	}

	async Task ChangeCompression(bool compressionEnabled)
	{
		if (message is null) return;

		if (compressionEnabled is true)
		{
			try
			{
				messageDecompressed = message.fileData;
				message.fileData = await Compression.Compress(message.fileData);
				message.isCompressed = true;
			}
			catch
			{
				Snackbar.Add(Localize["ErrorCompressingMessage"], Severity.Error);
			}
		}
		else
		{
			message.fileData = messageDecompressed!;
			messageDecompressed = null;
			message.isCompressed = false;
		}
		message.UpdateHeader();
	}
	public void Dispose()
	{
		AppState.OnChange -= StateHasChanged;
	}
}