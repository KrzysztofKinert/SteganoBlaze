@page "/ImageEncodingPage"
@inject AppState AppState
@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@using SteganoBlaze.Components.Image
@implements IDisposable

<PageTitle>@Localize["ImageEncoding"]</PageTitle>

<MudGrid Spacing="1">
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
			<OpenImage Disabled="@_processing" EncodedImage="false" OnImageChanged="@(CarrierChanged)"/>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
			<OpenMessage Disabled="@_processing" OnMessageChanged="@(MessageChanged)"/>
		</MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%">
			<PixelBitsPicker OnPixelBitsChanged="@(PixelBitsChanged)"/>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex flex-column">
			<EncodingInformation 
				Capacity="@((_carrier?.Width ?? 0) * (_carrier?.Height ?? 0) * _options.BitsToEncode.GetBitSum() / 8.0)"
				MessageSize="@(_message?.GetMessageSize() ?? 0)"
				OnMessageFitsChanged="@(MessageFitsChanged)">
			</EncodingInformation>
			<PixelValueInformation
				PixelBits="@_options.BitsToEncode">
			</PixelValueInformation>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex align-center justify-center mud-width-full">
			@if(AppState.WebPUnavailable)
			{
				<EncodingOptions 
						Disabled=@_processing
						OnOptionsChanged=@(OptionsChanged)>
				</EncodingOptions>
			}
			else
			{
				<EncodingOptions 
						Disabled=@_processing
						OnWebPEnabledChanged=@(WebPEnabledChanged)
						OnOptionsChanged=@(OptionsChanged)>
				</EncodingOptions>
			}
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<ImageEncode 
				CanEncode="@(_messageFits && _validPassword)"
				Carrier="@_carrier" 
				Message="@_message" 
				Options="@_options"
				OnProcessingChanged="@(ProcessingChanged)"
				OnEncodedCarrierChanged="@(EncodedCarrierChanged)">
			</ImageEncode>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" hidden="@(_carrier is null)">
		<MudPaper Elevation="3">
			<EncodingImagePreview Carrier="@_carrier" EncodedCarrier="@_encodedCarrier"/>
        </MudPaper>
	</MudItem>
</MudGrid>

@code {
	Image? _carrier;
	Message? _message;
	File? _encodedCarrier;

	byte[]? _messageDecompressed;

	bool _messageFits;
	bool _validPassword = true;
	bool _processing;

    readonly ImageSteganographyOptions _options = new();

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Primary, "ImageEncoding");
	}

	void PixelBitsChanged(PixelBits bits) { _options.BitsToEncode = bits; }
	void MessageFitsChanged(bool value) { _messageFits = value; }
	void ProcessingChanged(bool value) => _processing = value;
	void EncodedCarrierChanged(File value) { _encodedCarrier = value; }
	void WebPEnabledChanged(bool value) { _options.WebPFormatEnabled = value; }
	void CarrierChanged(Image newCarrier)
	{
		_encodedCarrier = null;
		_carrier = newCarrier;
	}
	async Task MessageChanged(Message newMessage)
	{
		_messageDecompressed = null;
		_message = newMessage;
		if(_options.CompressionEnabled is true)
			await ChangeCompression(true);
	}
	async Task OptionsChanged(SteganographyOptions value)
	{
		if (_options.CompressionEnabled != value.CompressionEnabled)
			await ChangeCompression(value.CompressionEnabled);

		_options.CompressionEnabled = value.CompressionEnabled;
		_options.EncryptionEnabled = value.EncryptionEnabled;
		_options.ScatteredEncodingEnabled = value.ScatteredEncodingEnabled;
		_options.Password = value.Password;

		_validPassword = _options.EncryptionEnabled is false || (_options.EncryptionEnabled is true && _options.Password is not null);
	}

	async Task ChangeCompression(bool compressionEnabled)
	{
		if (_message is null) return;

		if (compressionEnabled is true)
		{
			try
			{
				_messageDecompressed = _message.ByteData;
				_message.ByteData = await Compression.Compress(_message.ByteData);
				_message.IsCompressed = true;
			}
			catch
			{
				Snackbar.Add(Localize["ErrorCompressingMessage"], Severity.Error);
			}
		}
		else
		{
			_message.ByteData = _messageDecompressed!;
			_messageDecompressed = null;
			_message.IsCompressed = false;
		}
		_message.UpdateHeader();
	}
	public void Dispose()
	{
		AppState.OnChange -= StateHasChanged;
	}
}