@page "/ImageEncode"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@using System.IO.Compression;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar
@inject IJSRuntime js
@inherits BaseEncode

<PageTitle>@Loc["ImageEncoding"]</PageTitle>

<canvas hidden id="canvas"/>
<a hidden id="saveLink" download="" href="" target="_blank"/>
@if(carrier is not null)
{
	<img hidden id="carrierImage" @onload="GetCarrierDimensions" src="data:@carrier.contentType;base64,@carrier.base64Data"/>
}

<MudGrid Spacing="1">
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
                    <InputFile class="custom-file-input" OnChange="OpenCarrier" hidden id="inputImage" accept="image/png, image/jpeg, image/apng, image/gif, image/svg+xml, image/webp, image/bmp, image/x-icon"/>
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                StartIcon="@Icons.Filled.Image"
                                FullWidth="true"
								Disabled=@processing
								Class="mt-2"
                                for="inputImage">
                        <MudText Typo="Typo.button" Class="align-center">@Loc["ChooseCarrier"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(carrier?.fileName ?? "")</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0" >
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:70%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(carrier?.SizeToString() ?? "")</MudText>
						</MudListItem>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2"/>
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Dimensions"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@carrierDimensions</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
                    <InputFile class="custom-file-input" OnChange="OpenMessage" hidden id="inputFile" />
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                StartIcon="@Icons.Filled.AttachFile"
								Disabled=@processing
                                FullWidth="true"
								Class="mt-2"
                                for="inputFile">
                            <MudText Typo="Typo.button" Align="Align.Center">@Loc["ChooseMessage"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(message?.fileName ?? "")</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:70%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(message?.SizeToString() ?? "")</MudText>
						</MudListItem>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2"/>
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Type"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@(message?.contentType ?? "")</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
		</MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%">
			<MudText Typo="Typo.body1" Align="Align.Center">@Loc["PixelBitsToEncode"]</MudText>
			<MudDivider/>
            <MudList Clickable="false" Dense="true" DisableGutters="true" DisablePadding="true" Style="height:75%" Class="d-flex flex-row align-stretch">
                <MudListItem>
                    <MudNumericField Value="@redBitsToUse" ValueChanged="@((int b) => RedBitsToUseChanged(b))" Class="pl-2" Label="@Loc["RChannel"]" Variant="Variant.Text" Min="0" Max="8"/>
                </MudListItem>
                <MudListItem>
                    <MudNumericField Value="@greenBitsToUse" ValueChanged="@((int b) => GreenBitsToUseChanged(b))" Class="px-1" Label="@Loc["GChannel"]" Variant="Variant.Text" Min="0" Max="8"/>
                </MudListItem>
                <MudListItem>
                    <MudNumericField Value="@blueBitsToUse" ValueChanged="@((int b) => BlueBitsToUseChanged(b))" Class="pr-2" Label="@Loc["BChannel"]" Variant="Variant.Text" Min="0" Max="8"/>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex flex-column">
			<MudText Typo="Typo.body1" Align="Align.Center">@Loc["EncodingInformation"]</MudText>
			<MudDivider/>
            <MudList Clickable="false" Dense="true" DisableGutters="true" DisablePadding="true" style="height:100%" Class="d-flex flex-row align-content-center">
                <MudListItem>
					<MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
						<MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Loc["CarrierCapacity"]</MudText>
						<MudText Typo="Typo.body1" Align="Align.Center">@carrierCapacity</MudText>
					</MudContainer>
                </MudListItem>
                <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 ma-0"/>
                <MudListItem>
					<MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
						<MudText Typo="Typo.body2" Color="@carrierUsageColor" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Loc["CarrierUsage"]</MudText>
						<MudText Typo="Typo.body1" Color="@carrierUsageColor" Align="Align.Center">@carrierUsage</MudText>
					</MudContainer>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex align-center justify-center mud-width-full">
			<MudExpansionPanels Style="width:100%">
				<MudExpansionPanel Dense="true">
					<TitleContent>
						<div class="d-flex">
							<MudText>@Loc["MoreOptions"]</MudText>
						</div>
					</TitleContent>
					<ChildContent>
						<MudGrid style="height:100%" Class="align-content-center justify-space-around" Spacing="0">
							<MudItem sm="3" xs="12" Class="py-1" >
								<MudText Typo="Typo.body1" Align="Align.Center">@Loc["CarrierFormat"]</MudText>
								<MudContainer Class="d-flex flex-row justify-space-around align-center">
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">PNG</MudText>
									<MudSwitch @bind-Checked="@webPEnabled" Color="Color.Primary" T="bool" Class="mr-n2" Disabled="@processing"/>
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">WebP</MudText>
								</MudContainer>
							</MudItem>
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">@Loc["MessageCompression"]</MudText>
									<MudContainer Class="d-flex flex-row justify-space-around align-center">
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">@Loc["Off"]</MudText>
										<MudSwitch Checked="@compressionEnabled" CheckedChanged="@((bool c) => CompressionEnabledChanged(c))" Class="mr-n2" Color="Color.Primary" T="bool" Disabled="@(message is null || processing is true)" />
									<MudText Typo="Typo.body2"  Align="Align.Center" Style="width:60px">@Loc["On"]</MudText>
								</MudContainer>
							</MudItem>
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">@Loc["MessageEncryption"]</MudText>
								<MudContainer Class="d-flex flex-row justify-space-around align-center">
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">@Loc["Off"]</MudText>
									<MudSwitch Checked="@encryptionEnabled" CheckedChanged="@((bool e) => EncryptionEnabledChanged(e))" Class="mr-n2" Color="Color.Primary" T="bool" Disabled="@processing" />
									<MudText Typo="Typo.body2"  Align="Align.Center" Style="width:60px">@Loc["On"]</MudText>
								</MudContainer>
							</MudItem>
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">@Loc["ScatteredEncoding"]</MudText>
								<MudContainer Class="d-flex flex-row justify-space-around align-center">
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">@Loc["Off"]</MudText>
									<MudSwitch @bind-Checked="@scatteredEncodingEnabled" Class="mr-n2" Color="Color.Primary" T="bool" Disabled="@processing"/>
									<MudText Typo="Typo.body2" Align="Align.Center" Style="width:60px">@Loc["On"]</MudText>
								</MudContainer>
							</MudItem>
							<MudItem xs="12" hidden="@(!encryptionEnabled)">
								<MudDivider/>
								<MudText Typo="Typo.body1" Class="pt-4" Align="Align.Center">@Loc["EncryptionPassword"]</MudText>
								<MudGrid Class="align-content-center justify-space-evenly pb-4" Spacing="2">
									<MudItem sm="4" xs="12">
										<MudTextField @bind-Value="password" T="string" Label="@Loc["EnterPassword"]" HelperText="@passwordError" Error="@(passwordError is not null)" InputType="InputType.Password" HelperTextOnFocus="false"/>
									</MudItem>
									<MudItem sm="4" xs="12">
										<MudTextField @bind-Value="passwordRepeat" T="string" Label="@Loc["RepeatPassword"]" HelperText="@passwordRepeatError" Error="@(passwordRepeatError is not null)" InputType="InputType.Password" HelperTextOnFocus="false"/>
									</MudItem>
								</MudGrid>
							</MudItem>
						</MudGrid>
					</ChildContent>
				</MudExpansionPanel>
			</MudExpansionPanels>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width:100%" Class="d-flex flex-column pa-0">
				<MudListItem Class="pb-2 pt-3">
					<MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Style="transform: scaleY(2)" Value="@processingValue">
						<MudText Typo="Typo.subtitle2" Color="Color.Tertiary" Style="transform: scaleY(0.5);" Class="align-center">@processingTask</MudText>
					</MudProgressLinear>
				</MudListItem>
				<MudListItem Class="pt-0">
					<MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width:100%" Class="d-flex justify-space-around flex-row">
						<MudButton HtmlTag="label"
									Variant="Variant.Filled"
									Color="Color.Primary"
									StartIcon="@Icons.Filled.UploadFile"
									OnClick="EncodeFile"
									Disabled=@encodeButtonDisabled
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Encode"]</MudText>
						</MudButton>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
						<MudButton HtmlTag="label"
									Variant="Variant.Filled" 
									Color="Color.Primary"
									StartIcon="@Icons.Filled.Download"
									OnClick="SaveCarrier"
									Disabled=@(encodedCarrier is null)
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Save"]</MudText>
						</MudButton>
					</MudList>
				</MudListItem>
			</MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" hidden="@(carrier is null)">
		<MudPaper Elevation="3">
			<MudList Clickable="false" Dense="true">
				<MudListItem Class="py-0 my-0">
					<MudContainer Style="width:100%" Class="d-flex justify-center flex-row">
						<MudButton Variant="@originalButtonVariant"
									Color="Color.Primary"
									OnClick="ShowOriginalImage"
									Size="Size.Small">
							<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["OriginalImage"]</MudText>
						</MudButton>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
						<MudButton Variant="@encodedButtonVariant"
									Color="Color.Primary"
									OnClick="ShowEncodedImage"
									Disabled=@(encodedCarrier is null)
									Size="Size.Small">
							<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["EncodedImage"]</MudText>
						</MudButton>
					</MudContainer>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudSwipeArea OnSwipe="@OnSwipe">
						<MudContainer Class="d-flex justify-center">
							@if(carrier is not null)
							{
								<img id="carrierImagePreview" hidden="@showEmbeddedCarrier" class="center" style="max-width:100%; height:auto;" src="data:@carrier.contentType;base64,@carrier.base64Data" Fluid="true" Alt=@Loc["OriginalImage"]/>
							}
							@if (encodedCarrier is not null)
							{
								<img id="encodedImagePreview" hidden="@(!showEmbeddedCarrier)" class="center" style="max-width:100%; height:auto;" src="data:@encodedCarrier.contentType;base64,@encodedCarrier.base64Data" Fluid="true" Alt=@Loc["EncodedImage"]/>
							}
						</MudContainer>
					</MudSwipeArea>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>
</MudGrid>

@code {
	public int redBitsToUse { get; set; } = 1;
	public int greenBitsToUse { get; set; } = 1;
	public int blueBitsToUse { get; set; } = 1;

	public bool webPEnabled { get; set; } = false;

	int imageWidth;
	int imageHeight;
	string? carrierDimensions = ""; 

	bool showEmbeddedCarrier = false;

	MudBlazor.Variant originalButtonVariant = Variant.Filled;
	MudBlazor.Variant encodedButtonVariant = Variant.Outlined;

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Primary, "ImageEncoding");
	}
	public async Task ChangeState()
	{
		await InvokeAsync(StateHasChanged);
		await Task.Delay(1);
	}

	protected override async Task ResetCarrier()
	{
		processingValue = 0;

		processing = false;
		encodeButtonDisabled = true;

		carrierCapacity = "-";
		carrierUsage = "-";
		carrierDimensions = ""; 
		processingTask = "";

		imageWidth = 0;
		imageHeight = 0;
		carrier = null;
		encodedCarrier = null;

		carrierUsageColor = Color.Default;
		originalButtonVariant = Variant.Filled;
		encodedButtonVariant = Variant.Outlined;

		StateHasChanged();
		await Task.Delay(1);
	}
	protected override async Task ReadCarrier(byte[] carrierBytes, IBrowserFile fileInfo)
	{
		carrier = new Base64File(carrierBytes, fileInfo);
		carrierDimensions = Loc["Loading"];
	}

	async Task GetCarrierDimensions()
	{
		try
		{
			imageWidth = await js.InvokeAsync<int>("getImageWidth");
			imageHeight = await js.InvokeAsync<int>("getImageHeight");

			if ((imageHeight * imageWidth) > AppState.maxAllowedCarrierPixels)
				throw new Exception();

			carrierDimensions = imageWidth.ToString() + " x " + imageHeight.ToString();
		}
		catch
		{
		    Snackbar.Add(Loc["MaxCarrierPixels"] + " 5 MP", Severity.Error);
			await ResetCarrier();
		}
	}
	async Task CarrierCorrupted()
	{
		Snackbar.Add(Loc["CarrierImageCorrupted"], Severity.Error);
		await ResetCarrier();
	}

	async Task RedBitsToUseChanged(int value)
	{
		redBitsToUse = value;
		if(value > 3)
		{
			Snackbar.Add(Loc["EncodingBitsWarning"], Severity.Warning);
		}
		await CheckCapacity();
	}
	async Task GreenBitsToUseChanged(int value)
	{
		greenBitsToUse = value;
		if(value > 3)
		{
			Snackbar.Add(Loc["EncodingBitsWarning"], Severity.Warning);
		}
		await CheckCapacity();
	}
	async Task BlueBitsToUseChanged(int value)
	{
		blueBitsToUse = value;
		if(value > 3)
		{
			Snackbar.Add(Loc["EncodingBitsWarning"], Severity.Warning);
		}
		await CheckCapacity();
	}

	protected override async Task CheckCapacity()
	{
		if(carrier is not null) carrierCapacity = @Loc["Checking"];
		if(message is not null)
		{
			carrierUsageColor = Color.Default;
			carrierUsage = @Loc["Checking"];
		}
		StateHasChanged();
		await Task.Delay(1);

		if(imageWidth * imageHeight != 0)
		{
			var capacity = (double)(imageWidth * imageHeight * (redBitsToUse + greenBitsToUse + blueBitsToUse) / 8);
			carrierCapacity = ByteSize.FromBytes(capacity).ToString();

			if(message is not null)
			{
				carrierUsage = ((message.messageSize + 100) / capacity * 100).ToString("0.0") + " %";
				if (message.messageSize / capacity < 1)
				{
					carrierUsageColor = Color.Success;
					encodeButtonDisabled = false;
				}
				else
				{
					carrierUsageColor = Color.Error;
					encodeButtonDisabled = true;
				}
			}
		}
	}
	public void ShowOriginalImage()
	{
		showEmbeddedCarrier = false;
		originalButtonVariant = Variant.Filled;
		encodedButtonVariant = Variant.Outlined;
		StateHasChanged();
	}
	public void ShowEncodedImage()
	{
		showEmbeddedCarrier = true;
		originalButtonVariant = Variant.Outlined;
		encodedButtonVariant = Variant.Filled;
		StateHasChanged();
	}
	public void OnSwipe(SwipeDirection direction)
	{
		if(direction == SwipeDirection.LeftToRight && encodedCarrier is not null)
			ShowEncodedImage();
		else if(direction == SwipeDirection.RightToLeft && carrier is not null)
			ShowOriginalImage();
	}

	async Task EncodeFile()
	{
		if (carrier is null || message is null)
			return;
		if (ValidatePassword() is false) 
			return;

		watch.Reset();
		watch.Start();
		processing = true;
		encodedCarrier = null;

		//Reading image data
		await UpdateProgress(Loc["ReadingImageData"], 0);
		Image carrierImage = new Image { pixelData = await ReadJSStream("getImageData"), height = imageHeight, width = imageHeight};

		//Optional encryption
		if (encryptionEnabled)
		{
			try
			{
				await UpdateProgress(Loc["Encrypting message"], 20);
				await EncryptMessage();
			}
			catch
			{
				await UpdateProgress(Loc["ErrorEncryptingMessage"], 0);
				return;
			}
		}

		try
		{
			//Encoding message
			await UpdateProgress(Loc["EncodingMessage"], 30);
			PixelBits pixelBitsToEncode = new PixelBits { R = redBitsToUse, G = greenBitsToUse, B = blueBitsToUse };
			ImageEncoder encoder = new ImageEncoder(carrierImage, pixelBitsToEncode, scatteredEncodingEnabled);
			var encodedCarrierBytes = encoder.Encode(message);

			//Saving encoded image data
			await UpdateProgress(Loc["SavingImageData"], 80);
			var jsInProcess = (IJSInProcessRuntime)js;
			string encodedCarrierURL = jsInProcess.Invoke<string>("getImageURL", encodedCarrierBytes, GetCarrierFormat());

			var contentType = encodedCarrierURL.Split(";", 2)[0].Substring(5);
			var base64Data = encodedCarrierURL.Split(";", 2)[1].Substring(7);

			encodedCarrier = new Base64File { base64Data = base64Data, contentType = contentType, fileName = AddSuffix(carrier.fileName) };
		}
		catch
		{
			await UpdateProgress(Loc["ErrorEncodingMessage"], 0);
			return;
		}

		watch.Stop();
		await UpdateProgress(Loc["EncodingDoneIn"] + " " + watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);
		ShowEncodedImage();
		processing = false;
	}

	string AddSuffix(string fileName)
	{
		string name = Path.GetFileNameWithoutExtension(fileName);
		if (webPEnabled) return String.Concat(name, Loc["_encoded"], ".webp");
		else return String.Concat(name, Loc["_encoded"], ".png");
	}
	string GetCarrierFormat()
	{
		if (webPEnabled) return "image/webp";
		else return "image/png";
	}
}