@page "/AudioEncode"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using System.IO.Compression;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar


<PageTitle>@Loc["AudioEncoding"]</PageTitle>

<a hidden id="saveLink" download="" href="" target="_blank"/>
<MudGrid Spacing="1">
	<MudItem sm="12" md="6" xs="12">
        <MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
                    <InputFile class="custom-file-input" OnChange="OpenAudio" hidden accept="audio/wav, audio/x-wav" id="inputAudio"/>
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Tertiary"
                                StartIcon="@Icons.Filled.Audiotrack"
                                FullWidth="true"
								Disabled=@processing
								Class="mt-2"
                                for="inputAudio">
                        <MudText Typo="Typo.button" Class="align-center">@Loc["ChooseCarrier"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @if(originalCarrier is not null) @originalCarrier.fileName</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0" >
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:50%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @if(originalCarrier is not null) @originalCarrier.SizeToString()</MudText>
						</MudListItem>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 mx-1"/>
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Duration"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@if(carrier is not null) @carrier.GetDuration()</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem sm="12" md="6" xs="12"> 
		<MudPaper Elevation="3" Style="height:100%">
            <MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
                <MudListItem Class="py-0 my-0">
                    <InputFile class="custom-file-input" OnChange="OpenFile" hidden id="inputFile" />
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Tertiary"
                                StartIcon="@Icons.Filled.AttachFile"
								Disabled=@processing
                                FullWidth="true"
								Class="mt-2"
                                for="inputFile">
                            <MudText Typo="Typo.button" Align="Align.Center">@Loc["ChooseMessage"]</MudText>
                    </MudButton>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
                    <MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @if(message is not null) @message.fileName</MudText>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:50%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @if(message is not null) @message.SizeToString()</MudText>
						</MudListItem>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 ma-1"/>
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Type"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@if(message is not null) @message.contentType</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
                </MudListItem>
            </MudList>
		</MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%">
			<MudText Typo="Typo.body1" Align="Align.Center">@Loc["SampleBitsToEncode"]</MudText>
			<MudDivider/>
            <MudList Clickable="false" Dense="true" DisableGutters="true" DisablePadding="true" Class="d-flex flex-row align-content-center">
                <MudListItem>
                    <MudNumericField Class="px-4 mud-tertiary-text" AdornmentColor="Color.Tertiary" Value="@sampleBitsToUse" ValueChanged="@((int b) => SampleBitsToUseChanged(b))" Label="@Loc["Bits"]" Variant="Variant.Text" Min="1" Max="@(carrier?.bitsPerSample ?? 32)" />
                </MudListItem>
				<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 ma-0"/>
				<MudListItem>
					<MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
						<MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Loc["BitsPerSample"]</MudText>
						<MudText Typo="Typo.body1" Align="Align.Center">@if(carrier is not null) @carrier.bitsPerSample</MudText>
					</MudContainer>
				</MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex flex-column">
			<MudText Typo="Typo.body1" Align="Align.Center">@Loc["EncodingInformation"]</MudText>
			<MudDivider/>
            <MudList Clickable="false" Dense="true" DisableGutters="true" DisablePadding="true" style="height:100%" Class="d-flex flex-row align-content-center">
                <MudListItem>
					<MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
							<MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Loc["CarrierCapacity"]</MudText>
							<MudText Typo="Typo.body1" Align="Align.Center">@carrierCapacity</MudText>
					</MudContainer>
                </MudListItem>
                <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 ma-0"/>
                <MudListItem>
					<MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
						<MudText Typo="Typo.body2" Color="@carrierUsageColor" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Loc["CarrierUsage"]</MudText>
						<MudText Typo="Typo.body1" Color="@carrierUsageColor" Align="Align.Center">@carrierUsage</MudText>
					</MudContainer>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

		<MudItem xs="12">
        <MudPaper Elevation="3" Style="height:100%" Class="d-flex align-center justify-center mud-width-full">
			<MudExpansionPanels Style="width:100%">
				<MudExpansionPanel Dense="true">
					<TitleContent>
						<div class="d-flex">
							<MudText>Advanced Options</MudText>
						</div>
					</TitleContent>
					<ChildContent>
						<MudGrid style="height:100%" Class="align-content-center justify-space-around" Spacing="0">
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">Message Compression</MudText>
								<MudContainer Class="d-flex flex-row align-content-center justify-center align-center">
									<MudText Typo="Typo.body2" Align="Align.Justify">Off</MudText>
										<MudSwitch Checked="@compressionEnabled" CheckedChanged="@((bool c) => CompressionEnabledChanged(c))" Color="Color.Primary" Class="mx-2" T="bool" Disabled="@(message is null || processing is true)"/>
									<MudText Typo="Typo.body2"  Align="Align.Justify">On</MudText>
								</MudContainer>
							</MudItem>
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">Message Encryption</MudText>
								<MudContainer Class="d-flex flex-row align-content-center justify-center align-center">
									<MudText Typo="Typo.body2" Align="Align.Justify">Off</MudText>
										<MudSwitch Checked="@encryptionEnabled" CheckedChanged="@((bool e) => EncryptionEnabledChanged(e))"  Color="Color.Primary" Class="mx-2" T="bool" Disabled="@processing"/>
									<MudText Typo="Typo.body2"  Align="Align.Justify">On</MudText>
								</MudContainer>
							</MudItem>
							<MudItem sm="3" xs="12" Class="py-1">
								<MudText Typo="Typo.body1" Align="Align.Center">Spread Out Encoding</MudText>
								<MudContainer Class="d-flex flex-row align-content-center justify-center align-center">
									<MudText Typo="Typo.body2" Align="Align.Justify">Off</MudText>
									<MudSwitch @bind-Checked="@randomEncodingEnabled" Color="Color.Primary" Class="mx-2" T="bool" Disabled="@processing"/>
									<MudText Typo="Typo.body2" Align="Align.Justify">On</MudText>
								</MudContainer>
							</MudItem>
							<MudItem xs="12" hidden="@(!encryptionEnabled)">
								<MudDivider/>
								<MudText Typo="Typo.body1" Class="pt-4" Align="Align.Center">Encryption Options</MudText>
								<MudGrid Class="align-content-center justify-space-evenly pb-4" Spacing="2">
									<MudItem sm="4" xs="12">
										<MudTextField @bind-Value="password" T="string" Label="Choose a password" HelperText="@passwordError" Error="@(passwordError is not null)" InputType="InputType.Password" HelperTextOnFocus="false"/>
									</MudItem>
									<MudItem sm="4" xs="12">
										<MudTextField @bind-Value="passwordRepeat" T="string" Label="Repeat the password" HelperText="@passwordRepeatError" Error="@(passwordRepeatError is not null)" InputType="InputType.Password" HelperTextOnFocus="false"/>
									</MudItem>
								</MudGrid>
							</MudItem>
						</MudGrid>
					</ChildContent>
				</MudExpansionPanel>
			</MudExpansionPanels>
        </MudPaper>
	</MudItem>

	<MudItem xs="12">
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
			<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width:100%" Class="d-flex flex-column pa-0">
				<MudListItem Class="pb-2 pt-3">
					<MudProgressLinear Color="Color.Tertiary" Rounded="true" Size="Size.Large" Style="transform: scaleY(2)" Value="@processingValue">
						<MudText Typo="Typo.subtitle2" Color="Color.Primary" Style="transform: scaleY(0.5);" Class="align-center">@processingTask</MudText>
					</MudProgressLinear>
				</MudListItem>
				<MudListItem Class="pt-0">
					<MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width:100%" Class="d-flex justify-space-around flex-row">
						<MudButton HtmlTag="label"
									Variant="Variant.Filled"
									Color="Color.Tertiary"
									StartIcon="@Icons.Filled.UploadFile"
									OnClick="Validate"
									Disabled=@encodeButtonDisabled
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Encode"]</MudText>
						</MudButton>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
						<MudButton HtmlTag="label"
									Variant="Variant.Filled" 
									Color="Color.Tertiary"
									StartIcon="@Icons.Filled.Download"
									OnClick="SaveFile"
									Disabled=@(encodedCarrier is null)
									Style="width:100%">
							<MudText Typo="Typo.button" Class="align-center">@Loc["Save"]</MudText>
						</MudButton>
					</MudList>
				</MudListItem>
			</MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6" hidden="@(originalCarrier is null)">
		<MudPaper Elevation="3" Style="height:100%" Class="px-0 mx-0">
			<MudList Clickable="false" Dense="true" Class="px-0 mx-0">
				<MudListItem Class="pa-0 ma-0">
					<MudContainer Style="width:100%" Class="d-flex justify-center flex-row px-f">
						<MudButton Variant="Variant.Outlined"
									Color="Color.Tertiary"
									Size="Size.Small"
									FullWidth="true"
									DisableRipple = "true"
									Class="mt-2 cursor-default">
							<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["OriginalAudio"]</MudText>
						</MudButton>
					</MudContainer>
                </MudListItem>
                <MudListItem Class="px-0 mx-0">
					<MudContainer Class="d-flex justify-center px-2 mx-0">
						@if(originalCarrier is not null)
						{

							<audio controls="controls" autobuffer="autobuffer">
								<source id="carrierImagePreview" src="data:@originalCarrier.contentType;base64,@originalCarrier.base64Data"/>
							</audio>
						}
					</MudContainer>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

	<MudItem xs="12" sm="6" hidden=" @(encodedCarrier is null)">
		<MudPaper Elevation="3" Style="height:100%" Class="px-0 mx-0">
			<MudList Clickable="false" Dense="true" Class="px-0 mx-0">
				<MudListItem Class="pa-0 ma-0">
					<MudContainer Style="width:100%" Class="d-flex justify-center flex-row px-4">
						<MudButton Variant="Variant.Outlined"
									Color="Color.Tertiary"
									Size="Size.Small"
									FullWidth="true"
									DisableRipple = "true"
									Class="mt-2 cursor-default">
							<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["EncodedAudio"]</MudText>
						</MudButton>
					</MudContainer>
                </MudListItem>
                <MudListItem Class="py-0 my-0">
					<MudContainer Class="d-flex justify-center px-2 mx-0">
						@if (encodedCarrier is not null)
						{
							<audio controls="controls" autobuffer="autobuffer">
								<source id="encodedImagePreview" src="data:@encodedCarrier.contentType;base64,@encodedCarrier.base64Data"/>
							</audio>
						}
					</MudContainer>
                </MudListItem>
            </MudList>
        </MudPaper>
	</MudItem>

</MudGrid>

@inject IJSRuntime js
@code 
{
	Base64File? originalCarrier;
	Base64File? encodedCarrier;
	Message? message;
	byte[]? messageFileUncompressed;
	WAV? carrier;

	Stopwatch watch = new Stopwatch();

	public int sampleBitsToUse { get; set; } = 1;

	public string password { get; set; } = "";
	public string passwordRepeat { get; set; } = "";

	public bool encryptionEnabled { get; set; } = false;
	public bool randomEncodingEnabled { get; set; } = false;
	public bool compressionEnabled { get; set; } = false;

	int processingValue = 0;

	bool processing = false;
	bool encodeButtonDisabled = true;

	string? carrierCapacity = "-";
	string? carrierUsage = "-";
	string? processingTask = "";
	string? passwordError = null;
	string? passwordRepeatError = null;

	MudBlazor.Color carrierUsageColor = Color.Default;

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Tertiary, "AudioEncoding");
	}
	public async Task ChangeState()
	{
		await InvokeAsync(StateHasChanged);
		await Task.Delay(1);
	}
	async Task UpdateProgress(string progressText, int progressValue)
	{
		processingTask = progressText;
		processingValue = progressValue;
		StateHasChanged();
		await Task.Delay(10);
	}
	async Task ResetState()
	{
		processingValue = 0;

		processing = false;
		encodeButtonDisabled = true;

		carrierCapacity = "-";
		carrierUsage = "-";
		processingTask = "";

		originalCarrier = null;
		encodedCarrier = null;
		carrier = null;

		carrierUsageColor = Color.Default;

		StateHasChanged();
		await Task.Delay(1);
	}
	async Task SampleBitsToUseChanged(int value)
	{
		sampleBitsToUse = value;

		if(value > 3)
			Snackbar.Add(Loc["EncodingBitsWarning"], Severity.Warning);

		await CheckCapacity();
	}
	void EncryptionEnabledChanged(bool value)
	{
		encryptionEnabled = value;
		if (encryptionEnabled is not true)
		{
			password = "";
			passwordRepeat = "";
		}
	}
	async Task CompressionEnabledChanged(bool value)
	{
		compressionEnabled = value;
		if (compressionEnabled is true)
		{
			messageFileUncompressed = message!.file;
			message!.file = await Compress(message!.file);
			message.compressed = true;
		}
		else
		{
			message!.file = messageFileUncompressed!;
			messageFileUncompressed = null;
			message.compressed = false;
		}
		message.UpdateMetaData();
		await CheckCapacity();
	}
	async Task<byte[]> Compress(byte[] data)
	{
		using MemoryStream output = new MemoryStream();
		using (DeflateStream dstream = new DeflateStream(output, CompressionLevel.SmallestSize))
			await dstream.WriteAsync(data, 0, data.Length);

		return output.ToArray();
	}
	async Task OpenAudio(InputFileChangeEventArgs e)
	{
		await ResetState();

		if(e.File.Size > AppState.maxAllowedCarrierSize)
		{
			Snackbar.Add(Loc["MaxCarrierSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedCarrierSize).ToString(), Severity.Error);
			return;
		}

		var buf = new byte[e.File.Size];

		try
		{
			using (var stream = e.File.OpenReadStream(AppState.maxAllowedCarrierSize))
				await stream.ReadAsync(buf);
		}
		catch
		{
			Snackbar.Add(Loc["MaxCarrierSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedCarrierSize).ToString(), Severity.Error);
			return;
		}

		//originalCarrier = new Base64File { base64Data = Convert.ToBase64String(buf), contentType = e.File.ContentType, fileName = e.File.Name, fileSize = e.File.Size };
		originalCarrier = new Base64File (buf, e.File);
		carrier = new WAV(buf);

		await CheckCapacity();
	}

	async Task OpenFile(InputFileChangeEventArgs e)
	{
		message = null;
		messageFileUncompressed = null;
		compressionEnabled = false;

		if(e.File.Size > AppState.maxAllowedMessageSize)
		{
			Snackbar.Add(Loc["MaxMessageSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedMessageSize).ToString(), Severity.Error);
			return;
		}

		var buf = new byte[e.File.Size];

		try
		{
			using (var stream = e.File.OpenReadStream(AppState.maxAllowedMessageSize))
				await stream.ReadAsync(buf);
		}
		catch
		{
			Snackbar.Add(Loc["MaxMessageSize"] + " " + ByteSize.FromBytes(AppState.maxAllowedMessageSize).ToString(), Severity.Error);
			return;
		}

		message = new Message(buf, e.File);
		await CheckCapacity();
	}

	async Task CheckCapacity()
	{
		if(originalCarrier is not null) carrierCapacity = @Loc["Checking"];
		if(message is not null)
		{
			carrierUsageColor = Color.Default;
			carrierUsage = @Loc["Checking"];
		}
		StateHasChanged();
		await Task.Delay(1);

		if(carrier is not null)
		{
			//long bytesAvailable = carrier.samples * sampleBitsToUse / 8;
			var capacity = (double)carrier.samples * sampleBitsToUse / 8;
			carrierCapacity = ByteSize.FromBytes(capacity).ToString();

			if(message is not null)
			{
				carrierUsage = ((message.messageSize + 100) / capacity * 100).ToString("0.0") + " %";
				//var messageRatio = (double)(message.messageSize + 100) / bytesAvailable;
				//carrierUsage = (messageRatio * 100).ToString("0.0") + " %";
				if (message.messageSize / capacity < 1)
				{
					carrierUsageColor = Color.Success;
					encodeButtonDisabled = false;
				}
				else
				{
					carrierUsageColor = Color.Error;
					encodeButtonDisabled = true;
				}
			}
		}
	}
	async Task Validate()
	{
		if (encryptionEnabled is not true)
		{
			passwordError = null;
			passwordRepeatError = null;
			await EncodeFile();
		}
		else
		{
			if (password != passwordRepeat)
			{
				passwordError = "Password must match";
				passwordRepeatError = "Password must match";
			}
			else if (password == "")
			{
				passwordError = "Enter the password";
				passwordRepeatError = "Repeat the password";
			}
			else
			{
				passwordError = null;
				passwordRepeatError = null;
				await EncodeFile();
			}
		}
	}
	async Task EncodeFile()
	{
		watch.Reset();
		watch.Start();
		processing = true;
		encodedCarrier = null;
		//Optional encryption
		if (encryptionEnabled)
		{
			try
			{
				await UpdateProgress(Loc["Encrypting message"], 0);
				await EncryptMessage();
			}
			catch
			{
				await UpdateProgress(Loc["ErrorEncryptingMessage"], 0);
				return;
			}
		}

		try
		{
			//Encoding message
			await UpdateProgress(Loc["EncodingMessage"], 25);
			AudioEncoder encoder = new AudioEncoder(carrier, sampleBitsToUse, randomEncodingEnabled);
			var encodedCarrierBytes = encoder.Encode(message).data;

			encodedCarrier = new Base64File { base64Data = Convert.ToBase64String(encodedCarrierBytes), contentType = originalCarrier.contentType, fileName = AddSuffix(originalCarrier.fileName) };
		}
		catch
		{
			await UpdateProgress(Loc["ErrorEncodingMessage"], 0);
			return;
		}

		watch.Stop();
		await UpdateProgress(Loc["EncodingDoneIn"] + " " + watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);
		processing = false;
	}
	async Task EncryptMessage()
	{
		byte[] passwordBytes = UTF8Encoding.UTF8.GetBytes(password);
		byte[] salt = System.Security.Cryptography.RandomNumberGenerator.GetBytes(16);
		byte[] iv = System.Security.Cryptography.RandomNumberGenerator.GetBytes(16);

		List<byte[]> aesInputs = new List<byte[]> { message!.file, passwordBytes, salt, iv };
		message!.file = await ReadJSStream("encryptData", aesInputs);
		message.UpdateMetaData();

		aesInputs[0] = message!.metadata;
		message!.metadata = await ReadJSStream("encryptData", aesInputs);
		message.UpdateHeader(salt, iv);
	}
	async Task<byte[]> ReadJSStream(string jsFunction, List<byte[]>? aesInputs = null)
	{
		IJSStreamReference? dataStreamReference;
		if (aesInputs is null)
			dataStreamReference = await js.InvokeAsync<IJSStreamReference>(jsFunction);
		else
			dataStreamReference = await js.InvokeAsync<IJSStreamReference>(jsFunction, aesInputs[0], aesInputs[1], aesInputs[2], aesInputs[3]);

		var dataBytes = new byte[dataStreamReference.Length];
		using (var stream = await dataStreamReference.OpenReadStreamAsync(AppState.maxAllowedCarrierSize * 10))
			await stream.ReadAsync(dataBytes);

		return dataBytes;
	}
	private string AddSuffix(string fileName)
	{
		string name = Path.GetFileNameWithoutExtension(fileName);
		string ext = Path.GetExtension(fileName);
		return String.Concat(name, Loc["_encoded"], ext);
	}

	async Task SaveFile()
	{
		try
		{
			await js.InvokeVoidAsync("saveFile", encodedCarrier);
		}
		catch
		{
			Snackbar.Add(Loc["ErrorSavingImage"], Severity.Error);
		}
	}
}