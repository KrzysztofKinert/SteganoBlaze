@page "/AudioDecode"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text;
@using MudBlazor;
@using ByteSizeLib;
@using SteganoBlaze.Shared.Classes;
@using SteganoBlaze.Shared.Classes.Types;
@using System.IO.Compression;
@inherits BaseDecode;
@inject AppState AppState
@inject IStringLocalizer<Resource> Loc
@inject ISnackbar Snackbar

<PageTitle>@Loc["AudioDecoding"]g</PageTitle>

<a hidden id="saveLink" download="" href="" target="_blank"/>
<MudGrid Spacing="1">          
	<MudItem sm="12" md="6" xs="12">
		<MudPaper Elevation="3" Class="py-0 my-0" Style="height:100%">
			<MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
				<MudListItem Class="py-0 my-0">
					<InputFile class="custom-file-input" OnChange="OpenCarrier" hidden accept="audio/wav, audio/x-wav" id="inputImage"/>
					<MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Tertiary"
                                StartIcon="@Icons.Filled.Audiotrack"
                                FullWidth="true"
								Disabled=@processing
								Class="mt-2"
                                for="inputImage">
						<MudText Typo="Typo.button" Class="align-center">@Loc["ChooseCarrier"]</MudText>
					</MudButton>
				</MudListItem>
				<MudListItem Class="py-0 my-0">
					<MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(carrier?.fileName ?? "")</MudText>
				</MudListItem>
				<MudListItem Class="py-0 my-0" >
					<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
						<MudListItem Style="width:70%" Class="py-0 my-0">	
							<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(carrier?.SizeToString() ?? "")</MudText>
						</MudListItem>
						<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2" />
						<MudListItem DisableGutters="true" Class="py-0 my-0">
							<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
								<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Length"]:</MudText>
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@(carrierAudio?.GetDuration() ?? "")</MudText>
							</MudContainer>
						</MudListItem>
					</MudList>
				</MudListItem>
			</MudList>
		</MudPaper>
	</MudItem>

		<MudItem sm="12" md="6" xs="12"> 
			<MudPaper Elevation="3" Style="height:100%">
				<MudList Clickable="false" DisablePadding="true" Class="py-0 my-0" Style="height:100%">
					<MudListItem Class="py-0 my-0">
						<MudButton HtmlTag="label"
                                Variant="Variant.Outlined"
                                Color="Color.Tertiary"
                                StartIcon="@Icons.Filled.AttachFile"
                                FullWidth="true"
								DisableRipple="true"
								Class="mt-2 cursor-default">
								<MudText Typo="Typo.button" Align="Align.Center">@Loc["DecodedFile"]</MudText>
						</MudButton>
					</MudListItem>
					<MudListItem Class="py-0 my-0">
						<MudText Typo="Typo.body2" Style="word-break: break-all; font-size: min(3vw, 16px);">@Loc["Name"]: @(message?.fileName ?? "")</MudText>
					</MudListItem>
					<MudListItem Class="py-0 my-0">
						<MudList Clickable="false" Dense="true" Class="d-flex justify-space-between flex-row" DisablePadding="true" DisableGutters="true">
							<MudListItem Style="width:70%" Class="py-0 my-0">	
								<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Size"]: @(message?.SizeToString() ?? "")</MudText>
							</MudListItem>
							<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 my-1 mx-2"/>
							<MudListItem DisableGutters="true" Class="py-0 my-0">
								<MudContainer Class="d-flex flex-wrap align-content-start pa-0 ma-0">
									<MudText Class="pr-2" Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@Loc["Type"]:</MudText>
									<MudText Typo="Typo.body2" Style="font-size: min(3vw, 16px);">@(message?.contentType ?? "")</MudText>
								</MudContainer>
							</MudListItem>
						</MudList>
					</MudListItem>
				</MudList>
			</MudPaper>
		</MudItem>

		<MudItem xs="12">
			<MudPaper Elevation="3" Style="height:100%" Class="d-flex mud-width-full">
				<MudGrid Class="align-center justify-space-evenly" Spacing="0">
					<MudItem sm="4" xs="12" Class="pa-1">
						<MudText Typo="Typo.body1" Style="font-size: min(3vw, 16px);" Align="Align.Center">@Loc["EnterPasswordIfEncrypted"]</MudText> 
						<MudText Typo="Typo.body1" Style="font-size: min(3vw, 16px);" Align="Align.Center">@Loc["LeaveEmptyIfNot"]</MudText>
					</MudItem>
					<MudItem sm="4" xs="12" Class="pa-1">
						<MudTextField @bind-Value="password" T="string" Class="pt-0 mt-0 mb-2 mx-3" Label="@Loc["EnterPassword"]" InputType="InputType.Password"/>
					</MudItem>
				</MudGrid>
			</MudPaper>
		</MudItem>

		<MudItem xs="12">
			<MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full pa-0">
				<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width:100%" Class="d-flex flex-column pa-0">
					<MudListItem Class="pb-2 pt-3">
						<MudProgressLinear Color="Color.Tertiary" Rounded="true" Size="Size.Large" Style="transform: scaleY(2)" Value="@processingValue">
							<MudText Typo="Typo.subtitle2" Color="Color.Primary" Style="transform: scaleY(0.5);" Class="align-center">@processingTask</MudText>
						</MudProgressLinear>
					</MudListItem>
					<MudListItem Class="pt-0">
						<MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width:100%" Class="d-flex justify-space-around flex-row">
							<MudButton HtmlTag="label"
									Variant="Variant.Filled"
									Color="Color.Tertiary"
									StartIcon="@Icons.Filled.FilePresent"
									OnClick="Decode"
									Disabled=@(carrierAudio is null)
									Style="width:100%">
								<MudText Typo="Typo.button" Class="align-center">@Loc["Decode"]</MudText>
							</MudButton>
							<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
							<MudButton HtmlTag="label"
									Variant="Variant.Filled" 
									Color="Color.Tertiary"
									StartIcon="@Icons.Filled.Download"
									OnClick="SaveMessage"
									Disabled=@(message is null)
									Style="width:100%">
								<MudText Typo="Typo.button" Class="align-center">@Loc["Save"]</MudText>
							</MudButton>
						</MudList>
					</MudListItem>
				</MudList>
			</MudPaper>
		</MudItem>

		<MudItem xs="12" hidden="@(carrier is null)">
			<MudPaper Elevation="3" Style="height:100%" Class="px-0 mx-0">
				<MudList Clickable="false" Dense="true" Class="px-0 mx-0">
					<MudListItem Class="pa-0 ma-0">
						<MudContainer Style="width:100%" Class="d-flex justify-center flex-row px-4">
							<MudButton Variant="Variant.Outlined"
									Color="Color.Tertiary"
									Size="Size.Small"
									FullWidth="true"
									DisableRipple = "true"
									Class="mt-2 cursor-default">
								<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Loc["EncodedAudio"]</MudText>
							</MudButton>
						</MudContainer>
					</MudListItem>
					<MudListItem Class="py-0 my-0">
						<MudContainer Class="d-flex justify-center px-2">
						@if (carrier is not null)
						{
								<audio controls="controls" autobuffer="autobuffer">
									<source id="encodedImagePreview" src="data:@carrier.contentType;base64,@carrier.base64Data"/>
								</audio>
						}
					</MudContainer>
				</MudListItem>
			</MudList>
		</MudPaper>
	</MudItem>
</MudGrid>

@inject IJSRuntime js
@code
{
	WAV? carrierAudio;

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.SetPageTheme(Color.Tertiary, "AudioDecoding");
	}

	protected override async Task ReadCarrier(byte[] carrierBytes, IBrowserFile fileInfo)
	{
		carrier = new Base64File(carrierBytes, fileInfo);
		carrierAudio = new WAV(carrierBytes);
	}

	protected override async Task ResetCarrier()
	{
		processingValue = 0;
		processing = false;
		processingTask = "";

		fileName = "";
		contentType = "";
		fileSize = 0;
		compressed = false;

		carrier = null;
		message = null;
		carrierAudio = null;

		StateHasChanged();
		await Task.Delay(1);
	}

	async Task Decode()
	{
		if (carrierAudio is null) 
			return;

		watch.Reset();
		watch.Start();
		processing = true;
		await UpdateProgress(Loc["CheckingCarrier"], 0);

		try
		{
			AudioDecoder decoder = new AudioDecoder(carrierAudio);
						
			await UpdateProgress(Loc["DecodingMessage"], 20);

			string header = UnicodeEncoding.UTF8.GetString(decoder.Decode(15));
			var metadataSize = Int32.Parse(header.TakeLast(4).ToArray());


			byte[] file;

			if (password != "")
				file = await DecryptMessage(decoder, metadataSize);
			else
			{
				var metadataBytes = decoder.Decode(metadataSize);
				ParseMetadata(metadataBytes);
				file = decoder.Decode(fileSize);
			}

			if (compressed is true)
			{
				await UpdateProgress(Loc["DecompressingMessage"], 70);
				file = await Decompress(file);
			}

			await UpdateProgress(Loc["SavingMessageData"], 80);

			message = new Base64File { base64Data = Convert.ToBase64String(file), contentType = contentType, fileName = fileName, fileSize = fileSize };
			
			processing = false;
			watch.Stop();
			await UpdateProgress(Loc["DecodingDoneIn"] + " " + watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);
		}
		catch
		{
			processing = false;
			await UpdateProgress(Loc["AudioNotEncoded"], 0);
			return;
		}
	}
}
