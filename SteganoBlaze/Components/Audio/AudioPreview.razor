@inject IStringLocalizer<Resource> Localize
@inject AppState AppState
@implements IDisposable

<MudList Clickable="false" Dense="true" Class="px-0 mx-0">
    <MudListItem Class="pa-0 ma-0">
        <MudContainer Style="width: 100%" Class="d-flex justify-center flex-row px-4">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="true"
                       DisableRipple="true"
                       Class="mt-2 cursor-default">
                <MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Label</MudText>
            </MudButton>
        </MudContainer>
    </MudListItem>
    <MudListItem Class="py-0 my-0">
        <MudContainer Class="d-flex justify-center px-2">
            @if (_source is not null)
            {
                <audio controls="controls" autobuffer="autobuffer">
                    <source id="encodedImagePreview" src=@_source/>
                </audio>
            }
        </MudContainer>
    </MudListItem>
</MudList>

@code {

    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public IFile? Carrier { get; set; }

    string? _source = null;

    bool _shouldRender;
    IFile? _previousCarrier;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.OnChange += SetShouldRender;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        AppState.OnChange -= SetShouldRender;
    }

    void SetShouldRender()
    {
        _shouldRender = true;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (Carrier != _previousCarrier)
        {
            _source = Carrier is null ? null : "data:" + Carrier.ContentType + ";base64," + Carrier.Base64Data;
            _previousCarrier = Carrier;
            _shouldRender = true;
        }
        else
            _shouldRender = false;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }
    }

