@inject IStringLocalizer<Resource> Localize
@inject AppState AppState
@inject ISnackbar Snackbar
@implements IDisposable

<MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Localize["SampleValueChange"]</MudText>
<MudText Typo="Typo.body1" Color=@sampleMaxValueChangeColor Align="Align.Center">@sampleMaxValueChange</MudText>

@code {
	[Parameter] public int? SampleBits { get; set; }

	[Parameter] public int? BitsPerSample { get; set; }

	string sampleMaxValueChange = "";
	MudBlazor.Color sampleMaxValueChangeColor = Color.Default;

	int? previousSampleBits;
	int? previousBitsPerSample;
	bool shouldRender;

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.OnChange += SetShouldRender;
	}
	public void Dispose()
	{
		AppState.OnChange -= StateHasChanged;
		AppState.OnChange -= SetShouldRender;
	}
	protected override void OnParametersSet()
	{
		if (SampleBits != previousSampleBits || BitsPerSample != previousBitsPerSample)
		{
			shouldRender = true;
			previousSampleBits = SampleBits;
			previousBitsPerSample = BitsPerSample;
			CheckValueChange();
		}
		else
			shouldRender = false;
	}
	protected override bool ShouldRender() => shouldRender;
	void SetShouldRender()
	{
		shouldRender = true;
		StateHasChanged();
	}
	public void CheckValueChange()
	{
		double maxValueChange = BitsPerSample == 32 ? ValueChange.FromFloatingPoint(SampleBits ?? 1)
													: ValueChange.FromFixedPoint(SampleBits ?? 1, BitsPerSample ?? 16);

		sampleMaxValueChange = maxValueChange.ToString("0.00") + " %";
		switch (maxValueChange)
		{
			case > 10:
				sampleMaxValueChangeColor = Color.Warning;
				Snackbar.Add(Localize["EncodingBitsWarning"], Severity.Warning);
				break;
			case < 10 and > 2:
				sampleMaxValueChangeColor = Color.Default;
				break;
			case < 2 and > 0.005:
				sampleMaxValueChangeColor = Color.Success;
				break;
			case < 0.005:
				sampleMaxValueChange = "~" + maxValueChange.ToString("0.00") + " %";
				sampleMaxValueChangeColor = Color.Success;
				break;
		}
	}
}
