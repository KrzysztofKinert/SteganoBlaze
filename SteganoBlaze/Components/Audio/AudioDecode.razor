@inject IStringLocalizer<Resource> Localize
@inject IJSRuntime Js
@inject AppState AppState
@using System.Diagnostics
@using System.Text
@implements IDisposable

<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width: 100%" Class="d-flex flex-column pa-0">
    <MudListItem Class="pb-2 pt-3">
        <ProgressBar Task="@_processingTask" ProgressValue="@_processingValue"/>
    </MudListItem>
    <MudListItem Class="pt-0">
        <MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width: 100%" Class="d-flex justify-space-around flex-row">
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.FilePresent"
                       OnClick="Decode"
                       Disabled="@(EncodedCarrier is null)"
                       Style="width: 100%">
                <MudText Typo="Typo.button" Class="align-center">@Localize["Decode"]</MudText>
            </MudButton>
            <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
            <SaveButton FileToSave="@_message"/>
        </MudList>
    </MudListItem>
</MudList>

@code{

    [Parameter]
    public Wav? EncodedCarrier { get; set; }

    [Parameter]
    public string? Password { get; set; }

    [Parameter]
    public EventCallback<bool> OnProcessingChanged { get; set; }

    [Parameter]
    public EventCallback<File> OnMessageChanged { get; set; }

    File? _message;

    int _processingValue = 0;
    string? _processingTask = "";

    Stopwatch _watch = new();

    string _fileName = "";
    string _contentType = "";
    int _fileSize;
    bool _isCompressed;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    async Task UpdateProgress(string progressBarText, int progressBarValue)
    {
        _processingTask = progressBarText;
        _processingValue = progressBarValue;
        StateHasChanged();
        await Task.Delay(100);
    }

    async Task Decode()
    {
        if (EncodedCarrier is null)
            throw new Exception();

        _watch.Reset();
        _watch.Start();
        await OnProcessingChanged.InvokeAsync(true);
        await UpdateProgress(Localize["CheckingCarrier"], 0);

        foreach (var paramsToCheck in SampleParameters.GenerateParameters(EncodedCarrier.BitsPerSample))
        {
            try
            {
                var decoder = new AudioDecoder(EncodedCarrier, paramsToCheck);

                var headerSize = BitConverter.ToInt32(decoder.Decode(sizeof(int)));
                if (headerSize < Message.MinHeaderSize || headerSize > Message.MaxHeaderSize)
                    throw new Exception();

                var file = Password is null ? await DecodeMessage(decoder, headerSize) : await DecodeEncryptedMessage(decoder, headerSize);

                if (_isCompressed is true)
                {
                    await UpdateProgress(Localize["DecompressingMessage"], 75);
                    file = await Compression.Decompress(file);
                }

                await UpdateProgress(Localize["SavingMessageData"], 80);
                _message = new File { ByteData = file, ContentType = _contentType, FileName = _fileName, FileSize = _fileSize };

                await OnMessageChanged.InvokeAsync(_message);
                await OnProcessingChanged.InvokeAsync(false);
                _watch.Stop();
                await UpdateProgress(Localize["DecodingDoneIn"] + " " + _watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);
                return;
            }
            catch
            {
                // ignored
            }
        }
        await OnProcessingChanged.InvokeAsync(false);
        await UpdateProgress(Localize["AudioNotEncoded"], 0);
    }

    async Task<byte[]> DecodeMessage(AudioDecoder decoder, int headerSize)
    {
        var header = decoder.Decode(headerSize);
        ParseHeader(header);

        await UpdateProgress(Localize["DecodingMessage"], 20);
        var file = await DecodeFile(decoder);
        return file;
    }

    async Task<byte[]> DecodeEncryptedMessage(AudioDecoder decoder, int headerSize)
    {
        if (Password is null)
            throw new Exception();

        var salt = decoder.Decode(16);
        var ivHeader = decoder.Decode(12);
        var ivFile = decoder.Decode(12);

        var header = decoder.Decode(headerSize);
        var aesInputs = new List<byte[]> { header, Encoding.UTF8.GetBytes(Password), salt, ivHeader };
        header = await JsInterop.ReadStream(Js, "decryptData", aesInputs);
        ParseHeader(header);

        await UpdateProgress(Localize["DecodingMessage"], 20);
        var file = await DecodeFile(decoder);

        await UpdateProgress(Localize["DecryptingMessage"], 70);
        aesInputs = new List<byte[]> { file, Encoding.UTF8.GetBytes(Password), salt, ivFile };
        file = await JsInterop.ReadStream(Js, "decryptData", aesInputs);
        return file;
    }

    async Task<byte[]> DecodeFile(AudioDecoder decoder)
    {
        await UpdateProgress(Localize["DecodingMessage"], 20);

        var file = new byte[_fileSize];
        var updates = _fileSize / 250000 + 1;
        var updatesDone = 0;
        var bytesLeft = _fileSize;

        while (bytesLeft > 250000)
        {
            Array.Copy(decoder.Decode(250000), 0, file, 250000 * updatesDone, 250000);
            updatesDone++;
            bytesLeft -= 250000;
            await UpdateProgress(Localize["DecodingMessage"], 20 + updatesDone * 50 / updates);
        }
        Array.Copy(decoder.Decode(bytesLeft), 0, file, 250000 * updatesDone, bytesLeft);

        return file;
    }

    void ParseHeader(byte[] header)
    {
        var offset = 0;
        if (Encoding.UTF8.GetString(header, offset, 4) != "NAME")
            throw new Exception();
        int fileNameSize = BitConverter.ToInt16(header, offset + 4);
        _fileName = Encoding.UTF8.GetString(header, offset + 6, fileNameSize);

        offset += fileNameSize + 6;
        if (Encoding.UTF8.GetString(header, offset, 4) != "TYPE")
            throw new Exception();
        int contentTypeSize = BitConverter.ToInt16(header, offset + 4);
        _contentType = Encoding.UTF8.GetString(header, offset + 6, contentTypeSize);

        offset += contentTypeSize + 6;
        if (Encoding.UTF8.GetString(header, offset, 4) != "SIZE")
            throw new Exception();
        _fileSize = BitConverter.ToInt32(header, offset + 4);

        offset += 8;
        if (Encoding.UTF8.GetString(header, offset, 4) != "CMPR")
            throw new Exception();
        _isCompressed = BitConverter.ToBoolean(header, offset + 4);
    }

}