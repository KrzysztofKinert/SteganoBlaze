@inject AppState AppState
@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@implements IDisposable

<InputFile hidden
           OnChange="OpenFile"
           id="@_id"
           accept="@_accept">
</InputFile>
<MudButton HtmlTag="label"
            Variant="Variant.Filled"
            Color="@Color.Primary"
            StartIcon="@_icon"
            FullWidth="true"
			Disabled="@Disabled"
			Class="mt-2"
            for="@_id">
    <MudText Typo="Typo.button" Class="align-center">@_text</MudText>
</MudButton>


@code {
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public FileType Type { get; set; }

    [Parameter] public EventCallback<File> OnFileOpened { get; set; }

    string _id = "";
    string _accept = "";
    string _icon = "";
    string _text = "";

    protected override void OnInitialized() { AppState.OnChange += StateHasChanged; }
    public void Dispose() { AppState.OnChange -= StateHasChanged; }

    protected override void OnParametersSet()
    {
        switch (Type)
        {
            case FileType.Image:
                _id = "carrier";
                _accept = "image/png, image/jpeg, image/apng, image/gif, image/svg+xml, image/webp, image/bmp, image/x-icon";
                _icon = Icons.Filled.Image;
                _text = Localize["ChooseCarrier"];
                break;
            case FileType.EncodedImage:
                _id = "carrier";
                _accept = "image/png, image/webp";
                _icon = Icons.Filled.Image;
                _text = Localize["ChooseCarrier"];
                break;
            case FileType.Audio:
                _id = "carrier";
                _accept = "audio/wav, audio/x-wav";
                _icon = Icons.Filled.Audiotrack;
                _text = Localize["ChooseCarrier"];
                break;
            case FileType.Message:
                _id = "message";
                _accept = "";
                _icon = Icons.Filled.AttachFile;
                _text = Localize["ChooseMessage"];
                break;
        }
    }

    async Task OpenFile(InputFileChangeEventArgs e)
    {
        int maxFileSize = (Type == FileType.Message) ? AppState.MAX_MESSAGE_SIZE : AppState.MAX_CARRIER_SIZE;

        if (e.File.Size > maxFileSize)
        {
            if (Type == FileType.Message) 
                Snackbar.Add(Localize["MAX_MESSAGE_SIZE"] + " " + ByteSize.Reduce(maxFileSize), Severity.Error);
            else 
                Snackbar.Add(Localize["MAX_CARRIER_SIZE"] + " " + ByteSize.Reduce(maxFileSize), Severity.Error);
            return;
        }

        var fileBytes = new byte[e.File.Size];
        try
        {
            await using (var stream = e.File.OpenReadStream(maxFileSize))
                await stream.ReadAsync(fileBytes);

            await OnFileOpened.InvokeAsync(new File(fileBytes, e.File));
        }
        catch
        {
            if (Type == FileType.Message) 
                Snackbar.Add(Localize["MAX_MESSAGE_SIZE"] + " " + ByteSize.Reduce(maxFileSize), Severity.Error);
            else 
                Snackbar.Add(Localize["MAX_CARRIER_SIZE"] + " " + ByteSize.Reduce(maxFileSize), Severity.Error);
        }
    }
}
