@inject IStringLocalizer<Resource> Localize
@inject AppState AppState
@implements IDisposable

<MudText Typo="Typo.body1" Align="Align.Center" Style="font-size: min(5vw, 18px);">@Localize["EncodingInformation"]</MudText>
<MudDivider/>
<MudList Clickable="false" style="height: 100%" Dense="true" DisableGutters="true" DisablePadding="true" Class="d-flex flex-row align-content-center">
    <MudListItem>
        <MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
            <MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Localize["CarrierCapacity"]</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center">@_carrierCapacity</MudText>
        </MudContainer>
    </MudListItem>
    <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="pa-0 ma-0"/>
    <MudListItem>
        <MudContainer Class="d-flex flex-column align-content-center pa-0 ma-0">
            <MudText Typo="Typo.body2" Color="@_carrierUsageColor" Align="Align.Center" Style="font-size: min(3.5vw, 14px);">@Localize["CarrierUsage"]</MudText>
            <MudText Typo="Typo.body1" Color="@_carrierUsageColor" Align="Align.Center">@_carrierUsage</MudText>
        </MudContainer>
    </MudListItem>
</MudList>

@code {

    [Parameter]
    public double Capacity { get; set; }

    [Parameter]
    public long MessageSize { get; set; }

    [Parameter]
    public EventCallback<bool> OnMessageFitsChanged { get; set; }

    string _carrierCapacity = "-";
    string _carrierUsage = "-";
    Color _carrierUsageColor = Color.Default;

    double _previousCapacity;
    long _previousMessageSize;
    bool _shouldRender;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.OnChange += SetShouldRender;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        AppState.OnChange -= SetShouldRender;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Capacity != _previousCapacity || MessageSize != _previousMessageSize)
        {
            _shouldRender = true;
            _previousCapacity = Capacity;
            _previousMessageSize = MessageSize;
            await CheckCapacity();
        }
        else
            _shouldRender = false;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    void SetShouldRender()
    {
        _shouldRender = true;
        StateHasChanged();
    }

    async Task CheckCapacity()
    {
        if (Capacity != 0) _carrierCapacity = Localize["Checking"];
        if (MessageSize != 0)
        {
            _carrierUsageColor = Color.Default;
            _carrierUsage = Localize["Checking"];
        }
        StateHasChanged();
        await Task.Delay(1);

        if (Capacity != 0)
        {
            _carrierCapacity = ByteSize.Reduce(Capacity);

            if (MessageSize != 0)
            {
                _carrierUsage = ((MessageSize + 100) / Capacity * 100).ToString("0.0") + " %";
                if (MessageSize / Capacity < 1)
                {
                    _carrierUsageColor = Color.Success;
                    await OnMessageFitsChanged.InvokeAsync(true);
                    _shouldRender = true;
                }
                else
                {
                    _carrierUsageColor = Color.Error;
                    await OnMessageFitsChanged.InvokeAsync(false);
                    _shouldRender = true;
                }
            }
        }
    }
    }

