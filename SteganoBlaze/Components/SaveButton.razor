@inject IStringLocalizer<Resource> Localize
@inject ISnackbar Snackbar
@inject IJSRuntime Js
@inject AppState AppState
@implements IDisposable

<a hidden id="saveLink" download="" href="" target="_blank"></a>
<MudButton HtmlTag="label"
		   Variant="Variant.Filled"
		   Color="@Color.Primary"
		   StartIcon="@Icons.Filled.Download"
		   OnClick="SaveFile"
		   Disabled="@(FileToSave is null)"
		   Style="width:100%">
	<MudText Typo="Typo.button" Class="align-center">@Localize["Save"]</MudText>
</MudButton>

@code {
	[Parameter] public File? FileToSave { get; set; }

	protected override void OnInitialized() { AppState.OnChange += StateHasChanged; }
	public void Dispose() { AppState.OnChange -= StateHasChanged; }

    private void SaveFile()
	{
		if (FileToSave is null)
			throw new Exception();

		try
		{
		    ((IJSInProcessRuntime)Js).InvokeVoid(FileToSave.Base64Data is "" or null ? "saveFileBlob" : "saveFileBase64", FileToSave);
		}
		catch
		{
			Snackbar.Add(Localize["ErrorSavingMessage"], Severity.Error);
		}
	}
}
