@inject IStringLocalizer<Resource> Localize
@inject AppState AppState
@implements IDisposable

<MudList Clickable="false" Dense="true">
	<MudListItem Class="py-0 my-0">
		<MudContainer Style="width:100%" Class="d-flex justify-center flex-row">
			<MudButton Variant="Variant.Outlined"
						Color="Color.Primary"
						Size="Size.Small"
						DisableRipple = "true"
						Class="mt-2 cursor-default">
				<MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Localize["EncodedImage"]</MudText>
			</MudButton>
		</MudContainer>
    </MudListItem>
    <MudListItem Class="py-0 my-0">
		<MudContainer Class="d-flex justify-center">
			@if(EncodedCarrier is not null)
			{
				<img class="center" style="max-width:100%; height:auto;" src=@source Fluid="true" Alt=@Localize["EncodedImage"] />
			}
		</MudContainer>
    </MudListItem>
</MudList>

@code {
	[Parameter] public File? EncodedCarrier { get; set; }

	string source = "";

	bool shouldRender;
	File? previousEncodedCarrier;

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
		AppState.OnChange += SetShouldRender;
	}
	public void Dispose()
	{
		AppState.OnChange -= StateHasChanged;
		AppState.OnChange -= SetShouldRender;
	}
	void SetShouldRender()
	{
		shouldRender = true;
		StateHasChanged();
	}
	protected override void OnParametersSet()
	{
		if (EncodedCarrier != previousEncodedCarrier)
		{
			source = "data:" + (EncodedCarrier?.ContentType ?? "") + ";base64," + (EncodedCarrier?.Base64Data ?? "");
			previousEncodedCarrier = EncodedCarrier;
			shouldRender = true;
		}
		else
			shouldRender = false;
	}
	protected override bool ShouldRender() => shouldRender;
}
