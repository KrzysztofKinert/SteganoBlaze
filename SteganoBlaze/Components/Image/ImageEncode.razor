@inject IStringLocalizer<Resource> Localize
@inject IJSRuntime Js
@inject AppState AppState
@using System.Diagnostics
@using System.Text
@using System.Security.Cryptography
@implements IDisposable

<canvas hidden id="canvas"></canvas>
<MudList Clickable="false" Dense="true" DisablePadding="true" Style="width:100%" Class="d-flex flex-column pa-0">
	<MudListItem Class="pb-2 pt-3">
		<ProgressBar Task="@_processingTask" ProgressValue="@_processingValue"/>
	</MudListItem>
	<MudListItem Class="pt-0">
		<MudList Clickable="false" DisableGutters="true" DisablePadding="true" Dense="true" Style="width:100%" Class="d-flex justify-space-around flex-row">
			<MudButton  
				HtmlTag="label"
				Variant="Variant.Filled"
				Color="Color.Primary"
				StartIcon="@Icons.Filled.UploadFile"
				OnClick="Encode"
				Disabled="@(!CanEncode)"
				Style="width:100%">
				<MudText Typo="Typo.button" Class="align-center">@Localize["Encode"]</MudText>
			</MudButton>
			<MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
			<SaveButton FileToSave="@_encodedCarrier"/>
		</MudList>
	</MudListItem>
</MudList>

@code {
	[Parameter] public bool CanEncode { get; set; } = false;

	[Parameter] public Image? Carrier { get; set; }

	[Parameter] public Message? Message { get; set; }

	[Parameter] public ImageSteganographyOptions? Options { get; set; }

	[Parameter] public EventCallback<bool> OnProcessingChanged { get; set; }

	[Parameter] public EventCallback<File> OnEncodedCarrierChanged { get; set; }

	File? _encodedCarrier;

	int _processingValue = 0;
	string? _processingTask = "";

	Stopwatch _watch = new();

	protected override void OnInitialized() { AppState.OnChange += StateHasChanged; }
	public void Dispose() { AppState.OnChange -= StateHasChanged; }

	async Task UpdateProgress(string progressBarText, int progressBarValue)
	{
		_processingTask = progressBarText;
		_processingValue = progressBarValue;
		StateHasChanged();
		await Task.Delay(100);
	}

	async Task Encode()
	{
		if (Carrier is null || Message is null || Options is null)
			throw new Exception();

		_watch.Reset();
		_watch.Start();

		await OnProcessingChanged.InvokeAsync(true);
		_encodedCarrier = null;

		await UpdateProgress(Localize["ReadingImageData"], 0);
		Carrier.PixelData = await JsInterop.ReadStream(Js, "getImageData");

		if (Options.Password is not null)
		{
			try
			{
				await UpdateProgress(Localize["EncryptingMessage"], 20);
				await EncryptMessage();
			}
			catch
			{
				await UpdateProgress(Localize["ErrorEncryptingMessage"], 0);
				return;
			}
		}

		try
		{
			PixelParameters sampleParams = new PixelParameters(Options.ScatteredEncodingEnabled ? PixelOrder.Random : PixelOrder.Sequential, Options.BitsToEncode);
			ImageEncoder encoder = new ImageEncoder(Carrier, sampleParams);
			var encodedCarrierBytes = await EncodeFile(encoder);

			await UpdateProgress(Localize["SavingImageData"], 80);
			string encodedCarrierUrl = ((IJSInProcessRuntime)Js).Invoke<string>("getImageURL", encodedCarrierBytes, (Options?.WebPFormatEnabled ?? false) ? "image/webp" : "image/png");

			_encodedCarrier = new File { Base64Data = encodedCarrierUrl.Split(";", 2)[1].Substring(7), 
										ContentType = encodedCarrierUrl.Split(";", 2)[0].Substring(5),
										FileName = AddSuffix(Carrier.FileName) };
		}
		catch
		{
			await UpdateProgress(Localize["ErrorEncodingMessage"], 0);
			return;
		}

		_watch.Stop();
		await UpdateProgress(Localize["EncodingDoneIn"] + " " + _watch.Elapsed.TotalSeconds.ToString("0.00") + " s!", 100);

		await OnProcessingChanged.InvokeAsync(false);
		await OnEncodedCarrierChanged.InvokeAsync(_encodedCarrier);
	}
	async Task<byte[]> EncodeFile(ImageEncoder encoder)
	{
		if (Message is null)
			throw new Exception();

		await UpdateProgress(Localize["EncodingMessage"], 30);

		encoder.Encode(Message.Header);

		int updates = Message.ByteData.Length / 250000 + 1;
		int updatesDone = 0;
		int bytesLeft = Message.ByteData.Length;

		while (bytesLeft > 250000)
		{
			encoder.Encode(Message.ByteData[(250000 * updatesDone)..(250000 * (updatesDone + 1))]);
			updatesDone++;
			bytesLeft -= 250000;
			await UpdateProgress(Localize["EncodingMessage"], 25 + updatesDone * 50 / updates);
		}

		encoder.Encode(Message.ByteData[(250000 * updatesDone)..]);

		return encoder.GetEncodedCarrier();
	}
	async Task EncryptMessage()
	{
		if (Message is null || Options?.Password is null)
			return;

		byte[] passwordBytes = Encoding.UTF8.GetBytes(Options.Password);
		byte[] salt = RandomNumberGenerator.GetBytes(16);
		byte[] ivHeader = RandomNumberGenerator.GetBytes(12);
		byte[] ivFile = RandomNumberGenerator.GetBytes(12);

		List<byte[]> aesInputs = new List<byte[]> { Message.ByteData, passwordBytes, salt, ivFile };
		Message.ByteData = await JsInterop.ReadStream(Js, "encryptData", aesInputs);
		Message.UpdateHeader();

		aesInputs = new List<byte[]> { Message.GenerateMetadata(), passwordBytes, salt, ivHeader };
		Message.UpdateHeader(await JsInterop.ReadStream(Js, "encryptData", aesInputs), salt.Concat(ivHeader).Concat(ivFile).ToList());
	}
	string AddSuffix(string fileName)
	{
		string name = Path.GetFileNameWithoutExtension(fileName);
		return (Options?.WebPFormatEnabled ?? false) ? String.Concat(name, Localize["_encoded"], ".webp") 
													 : String.Concat(name, Localize["_encoded"], ".png");
	}
}
