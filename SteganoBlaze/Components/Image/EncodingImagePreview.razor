@inject IStringLocalizer<Resource> Localize
@inject AppState AppState
@implements IDisposable

<MudList Clickable="false" Dense="true">
    <MudListItem Class="py-0 my-0">
        <MudContainer Style="width: 100%" Class="d-flex justify-center flex-row">
            <MudButton Variant="@_originalButtonVariant"
                       Color="Color.Primary"
                       OnClick="ShowOriginalImage"
                       Size="Size.Small"
                       Style="width: 200px">
                <MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Localize["OriginalImage"]</MudText>
            </MudButton>
            <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
            <MudButton Variant="@_encodedButtonVariant"
                       Color="Color.Primary"
                       OnClick="ShowEncodedImage"
                       Disabled="@(EncodedCarrier is null)"
                       Size="Size.Small"
                       Style="width: 200px">
                <MudText Typo="Typo.button" Style="font-size: min(2vw, 16px);" Class="align-center">@Localize["EncodedImage"]</MudText>
            </MudButton>
        </MudContainer>
    </MudListItem>
    <MudListItem Class="py-0 my-0">
        <MudSwipeArea OnSwipe="@OnSwipe">
            <MudContainer Class="d-flex justify-center">
                <img class="center" style="height: auto; max-width: 100%;" src="@_source" Fluid="true" Alt="@_alt"/>
            </MudContainer>
        </MudSwipeArea>
    </MudListItem>
</MudList>

@code {

    [Parameter]
    public File? Carrier { get; set; }

    [Parameter]
    public File? EncodedCarrier { get; set; }

    string _source = "";
    string _alt = "";

    Variant _originalButtonVariant = Variant.Filled;
    Variant _encodedButtonVariant = Variant.Outlined;

    bool _shouldRender;
    File? _previousCarrier;
    File? _previousEncodedCarrier;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.OnChange += SetShouldRender;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        AppState.OnChange -= SetShouldRender;
    }

    void SetShouldRender()
    {
        _shouldRender = true;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (Carrier is not null && _previousCarrier != Carrier)
            ShowOriginalImage();

        if (EncodedCarrier is not null && _previousEncodedCarrier != EncodedCarrier)
            ShowEncodedImage();

        if (Carrier != _previousCarrier || EncodedCarrier != _previousEncodedCarrier)
        {
            _previousCarrier = Carrier;
            _previousEncodedCarrier = EncodedCarrier;
            _shouldRender = true;
        }
        else
            _shouldRender = false;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    private void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && EncodedCarrier is not null)
            ShowEncodedImage();
        else if (direction == SwipeDirection.RightToLeft && Carrier is not null)
            ShowOriginalImage();
    }

    private void ShowOriginalImage()
    {
        _source = "data:" + (Carrier?.ContentType ?? "") + ";base64," + (Carrier?.Base64Data ?? "");
        _alt = Localize["OriginalImage"];
        _originalButtonVariant = Variant.Filled;
        _encodedButtonVariant = Variant.Outlined;
        StateHasChanged();
        _shouldRender = true;
    }

    private void ShowEncodedImage()
    {
        _source = "data:" + (EncodedCarrier?.ContentType ?? "") + ";base64," + (EncodedCarrier?.Base64Data ?? "");
        _alt = Localize["EncodedImage"];
        _originalButtonVariant = Variant.Outlined;
        _encodedButtonVariant = Variant.Filled;
        StateHasChanged();
        _shouldRender = true;
    }
    }

